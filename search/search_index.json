{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the HedgeDoc Documentation \u00b6 HedgeDoc lets you create real-time collaborative markdown notes. You can test-drive it by visiting our HedgeDoc demo server . It is inspired by Hackpad, Etherpad and similar collaborative editors. This project originated with the team at HackMD and now forked into its own organisation. A longer writeup can be read in the history doc or you can have a look at an explanitory graph over at our website . If you have any questions that aren't answered here, feel free to ask us on Matrix , stop by our community forums or have a look at our FAQ .","title":"Home"},{"location":"#welcome-to-the-hedgedoc-documentation","text":"HedgeDoc lets you create real-time collaborative markdown notes. You can test-drive it by visiting our HedgeDoc demo server . It is inspired by Hackpad, Etherpad and similar collaborative editors. This project originated with the team at HackMD and now forked into its own organisation. A longer writeup can be read in the history doc or you can have a look at an explanitory graph over at our website . If you have any questions that aren't answered here, feel free to ask us on Matrix , stop by our community forums or have a look at our FAQ .","title":"Welcome to the HedgeDoc Documentation"},{"location":"configuration/","text":"Configuration \u00b6 You can choose to configure HedgeDoc with either a config file or with environment variables. Environment variables take precedence over configurations from the config files. They generally start with CMD_ for our own options, but we also list node-specific options you can configure this way. Environment variables are processed in lib/config/environment.js - so this is the first place to look if anything is missing not obvious from this document. The default values are defined in lib/config/default.js , in case you wonder if you even need to override it. The config file is processed in lib/config/index.js - so this is the first place to look if anything is missing not obvious from this document. The default values are defined in lib/config/default.js , in case you wonder if you even need to override it. To get started, it is a good idea to take the config.json.example and copy it to config.json before filling in your own details. Note: Due to the rename process we renamed all HMD_ -prefix variables to be CMD_ -prefixed. The old ones continue to work. Node.JS \u00b6 config file environment default and example value description NODE_ENV production or development set current environment (will apply corresponding settings in the config.json ) debug DEBUG true or false set debug mode, show more logs HedgeDoc basics \u00b6 config file environment default and example value description CMD_CONFIG_FILE no default , /path/to/config.json optional override for the path to HedgeDoc's config file db undefined , { \"dialect\": \"sqlite\", \"storage\": \"./db.hedgedoc.sqlite\" } set the db configs, see more here dbURL CMD_DB_URL undefined , postgres://username:password@localhost:5432/hedgedoc or mysql://username:password@localhost:3306/hedgedoc Set the db in URL style. If set, then the relevant db config entries will be overridden. loglevel CMD_LOGLEVEL info , debug ... Defines what kind of logs are provided to stdout. Available options: debug , verbose , info , warn , error forbiddenNoteIDs CMD_FORBIDDEN_NOTE_IDS ['robots.txt', 'favicon.ico', 'api', 'build', 'css', 'docs', 'fonts', 'js', 'uploads', 'vendor', 'views'] , ['robots.txt'] or 'robots.txt' disallow creation of notes, even if allowFreeUrl or CMD_ALLOW_FREEURL is true imageUploadType CMD_IMAGE_UPLOAD_TYPE filesystem , imgur , s3 , minio , azure , lutim Where to upload images. For S3, see our Image Upload Guides for S3 or Minio , also there's a whole section on their respective env vars below. sourceURL CMD_SOURCE_URL no default , https://github.com/hedgedoc/hedgedoc/tree/<current commit> Provides the link to the source code of HedgeDoc on the entry page (Please, make sure you change this when you run a modified version) tooBusyLag CMD_TOOBUSY_LAG 70 CPU time for one event loop tick until node throttles connections. (milliseconds) staticCacheTime 1 * 24 * 60 * 60 * 1000 static file cache time heartbeatInterval 5000 socket.io heartbeat interval heartbeatTimeout 10000 socket.io heartbeat timeout documentMaxLength 100000 note max length linkifyHeaderStyle keep-case , lower-case , gfm how is a header text converted into a link id HedgeDoc paths stuff \u00b6 these are rarely used for various reasons. config file environment default and example values description defaultNotePath ./public/default.md default note file path 1 , empty notes will be created with this template. dhParamPath undefined , ./cert/dhparam.pem SSL dhparam path 1 (only need when you set useSSL ) sslCAPath undefined , ['./cert/COMODORSAAddTrustCA.crt'] SSL ca chain 1 (only need when you set useSSL ) sslCertPath undefined , ./cert/hedgedoc_io.crt SSL cert path 1 (only need when you set useSSL ) sslKeyPath undefined , ./cert/client.key SSL key path 1 (only need when you set useSSL ) tmpPath os.tmpdir() , ./tmp/ temp directory path 1 docsPath ./public/docs docs directory path 1 viewPath ./public/views template directory path 1 uploadsPath ./public/uploads uploads directory 1 - needs to be persistent when you use imageUploadType filesystem Note: relative paths are based on HedgeDoc's base directory HedgeDoc Location \u00b6 config file environment default and example value description domain CMD_DOMAIN null , localhost , hedgedoc.org domain name urlPath CMD_URL_PATH null , hedgedoc If HedgeDoc is run from a subdirectory like www.example.com/<urlpath> host CMD_HOST 0.0.0.0 , localhost interface/ip to listen on port CMD_PORT 3000 , 80 port to listen on path CMD_PATH no default , /var/run/hedgedoc.sock path to UNIX domain socket to listen on (if specified, host or CMD_HOST and port or CMD_PORT are ignored) protocolUseSSL CMD_PROTOCOL_USESSL false or true set to use SSL protocol for resources path (only applied when domain is set) useSSL false or true set to use SSL server (if true , will auto turn on protocolUseSSL ) urlAddPort CMD_URL_ADDPORT false or true set to add port on callback URL (ports 80 or 443 won't be applied) (only applied when domain is set) allowOrigin CMD_ALLOW_ORIGIN ['localhost'] , ['hedgedoc.org'] , ['localhost', 'hedgedoc.org'] domain name whitelist (use comma to separate) Web security aspects \u00b6 config file environment default and example value description hsts {\"enable\": true, \"maxAgeSeconds\": 31536000, \"includeSubdomains\": true, \"preload\": true} HSTS options to use with HTTPS (default is the example value, max age is a year) CMD_HSTS_ENABLE true or false set to enable HSTS if HTTPS is also enabled (default is true ) CMD_HSTS_INCLUDE_SUBDOMAINS true or false set to include subdomains in HSTS (default is true ) CMD_HSTS_MAX_AGE 31536000 , 60 * 60 * 24 * 365 max duration in seconds to tell clients to keep HSTS status (default is a year) CMD_HSTS_PRELOAD true or false whether to allow preloading of the site's HSTS status (e.g. into browsers) csp {\"enable\": true, \"directives\": {\"scriptSrc\": \"trustworthy-scripts.example.com\"}, \"upgradeInsecureRequests\": \"auto\", \"addDefaults\": true} Configures Content Security Policy . Directives are passed to Helmet - see their documentation for more information on the format. Some defaults are added to the configured values so that the application doesn't break. To disable this behaviour, set addDefaults to false . Further, if usecdn is on, some CDN locations are allowed too. By default ( auto ), insecure (HTTP) requests are upgraded to HTTPS via CSP if useSSL is on. To change this behaviour, set upgradeInsecureRequests to either true or false . CMD_CSP_ENABLE true or false whether to enable Content Security Policy (directives cannot be configured with environment variables) CMD_CSP_REPORTURI undefined , https://<someid>.report-uri.com/r/d/csp/enforce Allows to add a URL for CSP reports in case of violations cookiePolicy CMD_COOKIE_POLICY lax , strict or none Set a SameSite policy whether cookies are send from cross-origin. Be careful: setting a SameSite value of none without https breaks the editor Privacy and External Requests \u00b6 config file environment default and example value description allowGravatar CMD_ALLOW_GRAVATAR true or false set to false to disable Libravatar as profile picture source on your instance. Libravatar is a federated open-source alternative to Gravatar. useCDN CMD_USECDN false or true set to use CDN resources or not (default is false ) Users and Privileges \u00b6 config file environment default and example value description allowAnonymous CMD_ALLOW_ANONYMOUS true or false Set to allow anonymous usage (default is true ). allowAnonymousEdits CMD_ALLOW_ANONYMOUS_EDITS false or true If allowAnonymous is false : allow users to select freely permission, allowing guests to edit existing notes (default is false ). allowFreeURL CMD_ALLOW_FREEURL false or true Set to allow new note creation by accessing a nonexistent note URL. This is the behavior familiar from Etherpad . defaultPermission CMD_DEFAULT_PERMISSION editable , freely , limited , locked , protected or private Set notes default permission (only applied on signed-in users). sessionName connect.sid Cookie session name. sessionLife CMD_SESSION_LIFE 14 * 24 * 60 * 60 * 1000 , 1209600000 (14 days) Cookie session life time in milliseconds. sessionSecret CMD_SESSION_SECRET secret Cookie session secret used to sign the session cookie. If none is set, one will randomly generated on each startup, meaning all your users will be logged out. Login methods \u00b6 Email (local account) \u00b6 config file environment default and example value description email CMD_EMAIL true or false Set to allow email sign-in. The default is true . allowEmailRegister CMD_ALLOW_EMAIL_REGISTER true or false Set to allow registration of new accounts using an email address. If set to false , you can still create accounts using the command line - see bin/manage_users for details (In production mode, remember to run it with NODE_ENV set as production in the enviroment). This setting has no effect if email or CMD_EMAIL is false . The default for allowEmailRegister or CMD_ALLOW_EMAIL_REGISTER is true . Dropbox Login \u00b6 config file environment default and example value description dropbox {clientID: ..., clientSecret: ...} An object containing the client ID and the client secret obtained by the Dropbox developer tools CMD_DROPBOX_CLIENTID no default Dropbox API client id CMD_DROPBOX_CLIENTSECRET no default Dropbox API client secret Facebook Login \u00b6 config file environment default and example value description facebook {clientID: ..., clientSecret: ...} An object containing the client ID and the client secret obtained by the Facebook app console CMD_FACEBOOK_CLIENTID no default Facebook API client id CMD_FACEBOOK_CLIENTSECRET no default Facebook API client secret GitHub Login \u00b6 config file environment default and example value description github {clientID: ..., clientSecret: ...} An object containing the client ID and the client secret obtained by the GitHub developer page. For more details have a look at the GitHub auth guide . CMD_GITHUB_CLIENTID no default GitHub API client id CMD_GITHUB_CLIENTSECRET no default GitHub API client secret GitLab Login \u00b6 config file environment default and example value description gitlab {baseURL: ..., scope: ..., version: ..., clientID: ..., clientSecret: ...} An object containing your GitLab application data. Refer to the GitLab guide for more details! CMD_GITLAB_SCOPE no default , read_user or api GitLab API requested scope (default is api ) (GitLab snippet import/export need api scope) CMD_GITLAB_BASEURL no default GitLab authentication endpoint, set to use other endpoint than GitLab.com (optional) CMD_GITLAB_CLIENTID no default GitLab API client id CMD_GITLAB_CLIENTSECRET no default GitLab API client secret CMD_GITLAB_VERSION v4 GitLab API version (v3 or v4) Google Login \u00b6 config file environment default and example value description google {clientID: ..., clientSecret: ..., hostedDomain: ...} An object containing the client ID and the client secret obtained by the Google API console CMD_GOOGLE_CLIENTID no default Google API client id CMD_GOOGLE_CLIENTSECRET no default Google API client secret CMD_GOOGLE_HOSTEDDOMAIN no default , example.com Provided only if the user belongs to a hosted domain. default is undefined LDAP Login \u00b6 config file environment default and example value description ldap {providerName: ..., url: ..., bindDn: ..., bindCredentials: ..., searchBase: ..., searchFilter: ..., searchAttributes: ..., usernameField: ..., useridField: ..., tlsca: ...} An object detailing the LDAP connection. Refer to the LDAP-AD guide for more details! CMD_LDAP_URL no default , ldap://example.com URL of LDAP server CMD_LDAP_BINDDN no default bindDn for LDAP access CMD_LDAP_BINDCREDENTIALS no default , bindCredentials for LDAP access CMD_LDAP_SEARCHBASE no default , o=users,dc=example,dc=com LDAP directory to begin search from CMD_LDAP_SEARCHFILTER no default , (uid={{username}}) LDAP filter to search with CMD_LDAP_SEARCHATTRIBUTES no default , displayName, mail LDAP attributes to search with (use comma to separate) CMD_LDAP_USERIDFIELD no default , uidNumber or uid or sAMAccountName The LDAP field which is used uniquely identify a user on HedgeDoc CMD_LDAP_USERNAMEFIELD no default , fallback to userid The LDAP field which is used as the username on HedgeDoc CMD_LDAP_TLS_CA no default , server-cert.pem, root.pem Root CA for LDAP TLS in PEM format (use comma to separate) CMD_LDAP_PROVIDERNAME no default , My institution Optional name to be displayed at login form indicating the LDAP provider Mattermost Login \u00b6 config file environment default and example value description mattermost {baseURL: ..., clientID: ..., clientSecret: ...} An object containing the base URL of your Mattermost application data. Refer to the Mattermost guide for more details! CMD_MATTERMOST_BASEURL no default Mattermost authentication endpoint for versions below 5.0. For Mattermost version 5.0 and above, see guide . CMD_MATTERMOST_CLIENTID no default Mattermost API client id CMD_MATTERMOST_CLIENTSECRET no default Mattermost API client secret OAuth2 Login \u00b6 config file environment default and example value description oauth2 {baseURL: ..., userProfileURL: ..., userProfileUsernameAttr: ..., userProfileDisplayNameAttr: ..., userProfileEmailAttr: ..., tokenURL: ..., authorizationURL: ..., clientID: ..., clientSecret: ..., scope: ...} An object detailing your OAuth2 provider. Refer to the Mattermost or Nextcloud examples for more details! CMD_OAUTH2_USER_PROFILE_URL no default , https://example.com Where to retrieve information about a user after successful login. Needs to output JSON. (no default value) Refer to the Mattermost or Nextcloud examples for more details on all of the CMD_OAUTH2... options. CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR no default , name where to find the username in the JSON from the user profile URL. (no default value) CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR no default , display-name where to find the display-name in the JSON from the user profile URL. (no default value) CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR no default , email where to find the email address in the JSON from the user profile URL. (no default value) CMD_OAUTH2_USER_PROFILE_ID_ATTR no default , user_uuid where to find the dedicated user ID (optional, overrides CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR ) CMD_OAUTH2_TOKEN_URL no default , https://example.com sometimes called token endpoint, please refer to the documentation of your OAuth2 provider (no default value) CMD_OAUTH2_AUTHORIZATION_URL no default , https://example.com authorization URL of your provider, please refer to the documentation of your OAuth2 provider (no default value) CMD_OAUTH2_CLIENT_ID no default , afae02fckafd... you will get this from your OAuth2 provider when you register HedgeDoc as OAuth2-client, (no default value) CMD_OAUTH2_CLIENT_SECRET no default , afae02fckafd... you will get this from your OAuth2 provider when you register HedgeDoc as OAuth2-client, (no default value) CMD_OAUTH2_PROVIDERNAME no default , My institution Optional name to be displayed at login form indicating the oAuth2 provider CMD_OAUTH2_SCOPE no default , openid email profile Scope to request for OIDC (OpenID Connect) providers. CMD_OAUTH2_ROLES_CLAIM no default , roles ID token claim, which is supposed to provide an array of strings of roles CMD_OAUTH2_ACCESS_ROLE no default , role/hedgedoc The role which should be included in the ID token roles claim to grant access SAML Login \u00b6 config file environment default and example value description saml {idpSsoUrl: ..., idpCert: ..., clientCert: ..., issuer: ..., identifierFormat: ..., disableRequestedAuthnContext: ..., groupAttribute: ..., externalGroups: [], requiredGroups: [], attribute: {id: ..., username: ..., email: ...}} An object detailing your SAML provider. Refer to the OneLogin and SAML guides for more details! CMD_SAML_IDPSSOURL no default , https://idp.example.com/sso authentication endpoint of IdP. for details, see guide . CMD_SAML_IDPCERT no default , /path/to/cert.pem certificate file path of IdP in PEM format CMD_SAML_CLIENTCERT no default , /path/to/privatecert.pem certificate file path for the client in PEM format (optional) CMD_SAML_ISSUER no default Issuer to supply to identity provider (optional, default: serverURL config)\" CMD_SAML_DISABLEREQUESTEDAUTHNCONTEXT no default , true or false true to allow any authentication method, false restricts to password authentication (PasswordProtectedTransport) method (default: false) CMD_SAML_IDENTIFIERFORMAT urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress name identifier format (optional, default: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress ) CMD_SAML_GROUPATTRIBUTE no default , memberOf attribute name for group list (optional) CMD_SAML_REQUIREDGROUPS no default , hedgedoc-users group names that allowed (use vertical bar to separate) (optional) CMD_SAML_EXTERNALGROUPS no default , Temporary-staff group names that not allowed (use vertical bar to separate) (optional) CMD_SAML_ATTRIBUTE_ID no default , sAMAccountName attribute map for id (optional, default: NameID of SAML response) CMD_SAML_ATTRIBUTE_USERNAME no default , mailNickname attribute map for username (optional, default: NameID of SAML response) CMD_SAML_ATTRIBUTE_EMAIL no default , mail attribute map for email (optional, default: NameID of SAML response if CMD_SAML_IDENTIFIERFORMAT is default) Twitter Login \u00b6 config file environment default and example value description twitter {consumerKey: ..., consumerSecret: ...} An object containing the consumer key and secret obtained by the Twitter developer tools . For more details have a look at the Twitter auth guide CMD_TWITTER_CONSUMERKEY no default Twitter API consumer key CMD_TWITTER_CONSUMERSECRET no default Twitter API consumer secret Upload Storage \u00b6 These are only relevant when they are also configured in sync with their CMD_IMAGE_UPLOAD_TYPE . Also keep in mind, that filesystem is available, so you don't have to use either of these. Amazon S3 \u00b6 config file environment default and example value description s3 { \"accessKeyId\": \"YOUR_S3_ACCESS_KEY_ID\", \"secretAccessKey\": \"YOUR_S3_ACCESS_KEY\", \"region\": \"YOUR_S3_REGION\" } When imageuploadtype be set to s3 , you would also need to setup this key, check our S3 Image Upload Guide CMD_S3_ACCESS_KEY_ID no default AWS access key id CMD_S3_SECRET_ACCESS_KEY no default AWS secret key CMD_S3_REGION no default , ap-northeast-1 AWS S3 region s3bucket CMD_S3_BUCKET no default AWS S3 bucket name CMD_S3_ENDPOINT ENV no default S3 API endpoint if you don't use AWS name Azure Blob Storage \u00b6 config file environment default and example value description CMD_AZURE_CONNECTION_STRING no default Azure Blob Storage connection string CMD_AZURE_CONTAINER no default Azure Blob Storage container name (automatically created if non existent) imgur \u00b6 config file environment default and example value description CMD_IMGUR_CLIENTID no default Imgur API client id Minio \u00b6 config file environment default and example value description minio { \"accessKey\": \"YOUR_MINIO_ACCESS_KEY\", \"secretKey\": \"YOUR_MINIO_SECRET_KEY\", \"endpoint\": \"YOUR_MINIO_HOST\", port: 9000, secure: true } When imageUploadType is set to minio , you need to set this key. Also check out our Minio Image Upload Guide CMD_MINIO_ACCESS_KEY no default Minio access key CMD_MINIO_SECRET_KEY no default Minio secret key CMD_MINIO_ENDPOINT no default , minio.example.org Address of your Minio endpoint/instance CMD_MINIO_PORT no default , 9000 Port that is used for your Minio instance CMD_MINIO_SECURE no default , true If set to true HTTPS is used for Minio Lutim \u00b6 config file environment default and example value description lutim {\"url\": \"YOUR_LUTIM_URL\"} When imageUploadType is set to lutim , you can setup the lutim url CMD_LUTIM_URL https://framapic.org/ When CMD_IMAGE_UPLOAD_TYPE is set to lutim , you can setup the lutim url","title":"Configuration"},{"location":"configuration/#configuration","text":"You can choose to configure HedgeDoc with either a config file or with environment variables. Environment variables take precedence over configurations from the config files. They generally start with CMD_ for our own options, but we also list node-specific options you can configure this way. Environment variables are processed in lib/config/environment.js - so this is the first place to look if anything is missing not obvious from this document. The default values are defined in lib/config/default.js , in case you wonder if you even need to override it. The config file is processed in lib/config/index.js - so this is the first place to look if anything is missing not obvious from this document. The default values are defined in lib/config/default.js , in case you wonder if you even need to override it. To get started, it is a good idea to take the config.json.example and copy it to config.json before filling in your own details. Note: Due to the rename process we renamed all HMD_ -prefix variables to be CMD_ -prefixed. The old ones continue to work.","title":"Configuration"},{"location":"configuration/#nodejs","text":"config file environment default and example value description NODE_ENV production or development set current environment (will apply corresponding settings in the config.json ) debug DEBUG true or false set debug mode, show more logs","title":"Node.JS"},{"location":"configuration/#hedgedoc-basics","text":"config file environment default and example value description CMD_CONFIG_FILE no default , /path/to/config.json optional override for the path to HedgeDoc's config file db undefined , { \"dialect\": \"sqlite\", \"storage\": \"./db.hedgedoc.sqlite\" } set the db configs, see more here dbURL CMD_DB_URL undefined , postgres://username:password@localhost:5432/hedgedoc or mysql://username:password@localhost:3306/hedgedoc Set the db in URL style. If set, then the relevant db config entries will be overridden. loglevel CMD_LOGLEVEL info , debug ... Defines what kind of logs are provided to stdout. Available options: debug , verbose , info , warn , error forbiddenNoteIDs CMD_FORBIDDEN_NOTE_IDS ['robots.txt', 'favicon.ico', 'api', 'build', 'css', 'docs', 'fonts', 'js', 'uploads', 'vendor', 'views'] , ['robots.txt'] or 'robots.txt' disallow creation of notes, even if allowFreeUrl or CMD_ALLOW_FREEURL is true imageUploadType CMD_IMAGE_UPLOAD_TYPE filesystem , imgur , s3 , minio , azure , lutim Where to upload images. For S3, see our Image Upload Guides for S3 or Minio , also there's a whole section on their respective env vars below. sourceURL CMD_SOURCE_URL no default , https://github.com/hedgedoc/hedgedoc/tree/<current commit> Provides the link to the source code of HedgeDoc on the entry page (Please, make sure you change this when you run a modified version) tooBusyLag CMD_TOOBUSY_LAG 70 CPU time for one event loop tick until node throttles connections. (milliseconds) staticCacheTime 1 * 24 * 60 * 60 * 1000 static file cache time heartbeatInterval 5000 socket.io heartbeat interval heartbeatTimeout 10000 socket.io heartbeat timeout documentMaxLength 100000 note max length linkifyHeaderStyle keep-case , lower-case , gfm how is a header text converted into a link id","title":"HedgeDoc basics"},{"location":"configuration/#hedgedoc-paths-stuff","text":"these are rarely used for various reasons. config file environment default and example values description defaultNotePath ./public/default.md default note file path 1 , empty notes will be created with this template. dhParamPath undefined , ./cert/dhparam.pem SSL dhparam path 1 (only need when you set useSSL ) sslCAPath undefined , ['./cert/COMODORSAAddTrustCA.crt'] SSL ca chain 1 (only need when you set useSSL ) sslCertPath undefined , ./cert/hedgedoc_io.crt SSL cert path 1 (only need when you set useSSL ) sslKeyPath undefined , ./cert/client.key SSL key path 1 (only need when you set useSSL ) tmpPath os.tmpdir() , ./tmp/ temp directory path 1 docsPath ./public/docs docs directory path 1 viewPath ./public/views template directory path 1 uploadsPath ./public/uploads uploads directory 1 - needs to be persistent when you use imageUploadType filesystem Note: relative paths are based on HedgeDoc's base directory","title":"HedgeDoc paths stuff"},{"location":"configuration/#hedgedoc-location","text":"config file environment default and example value description domain CMD_DOMAIN null , localhost , hedgedoc.org domain name urlPath CMD_URL_PATH null , hedgedoc If HedgeDoc is run from a subdirectory like www.example.com/<urlpath> host CMD_HOST 0.0.0.0 , localhost interface/ip to listen on port CMD_PORT 3000 , 80 port to listen on path CMD_PATH no default , /var/run/hedgedoc.sock path to UNIX domain socket to listen on (if specified, host or CMD_HOST and port or CMD_PORT are ignored) protocolUseSSL CMD_PROTOCOL_USESSL false or true set to use SSL protocol for resources path (only applied when domain is set) useSSL false or true set to use SSL server (if true , will auto turn on protocolUseSSL ) urlAddPort CMD_URL_ADDPORT false or true set to add port on callback URL (ports 80 or 443 won't be applied) (only applied when domain is set) allowOrigin CMD_ALLOW_ORIGIN ['localhost'] , ['hedgedoc.org'] , ['localhost', 'hedgedoc.org'] domain name whitelist (use comma to separate)","title":"HedgeDoc Location"},{"location":"configuration/#web-security-aspects","text":"config file environment default and example value description hsts {\"enable\": true, \"maxAgeSeconds\": 31536000, \"includeSubdomains\": true, \"preload\": true} HSTS options to use with HTTPS (default is the example value, max age is a year) CMD_HSTS_ENABLE true or false set to enable HSTS if HTTPS is also enabled (default is true ) CMD_HSTS_INCLUDE_SUBDOMAINS true or false set to include subdomains in HSTS (default is true ) CMD_HSTS_MAX_AGE 31536000 , 60 * 60 * 24 * 365 max duration in seconds to tell clients to keep HSTS status (default is a year) CMD_HSTS_PRELOAD true or false whether to allow preloading of the site's HSTS status (e.g. into browsers) csp {\"enable\": true, \"directives\": {\"scriptSrc\": \"trustworthy-scripts.example.com\"}, \"upgradeInsecureRequests\": \"auto\", \"addDefaults\": true} Configures Content Security Policy . Directives are passed to Helmet - see their documentation for more information on the format. Some defaults are added to the configured values so that the application doesn't break. To disable this behaviour, set addDefaults to false . Further, if usecdn is on, some CDN locations are allowed too. By default ( auto ), insecure (HTTP) requests are upgraded to HTTPS via CSP if useSSL is on. To change this behaviour, set upgradeInsecureRequests to either true or false . CMD_CSP_ENABLE true or false whether to enable Content Security Policy (directives cannot be configured with environment variables) CMD_CSP_REPORTURI undefined , https://<someid>.report-uri.com/r/d/csp/enforce Allows to add a URL for CSP reports in case of violations cookiePolicy CMD_COOKIE_POLICY lax , strict or none Set a SameSite policy whether cookies are send from cross-origin. Be careful: setting a SameSite value of none without https breaks the editor","title":"Web security aspects"},{"location":"configuration/#privacy-and-external-requests","text":"config file environment default and example value description allowGravatar CMD_ALLOW_GRAVATAR true or false set to false to disable Libravatar as profile picture source on your instance. Libravatar is a federated open-source alternative to Gravatar. useCDN CMD_USECDN false or true set to use CDN resources or not (default is false )","title":"Privacy and External Requests"},{"location":"configuration/#users-and-privileges","text":"config file environment default and example value description allowAnonymous CMD_ALLOW_ANONYMOUS true or false Set to allow anonymous usage (default is true ). allowAnonymousEdits CMD_ALLOW_ANONYMOUS_EDITS false or true If allowAnonymous is false : allow users to select freely permission, allowing guests to edit existing notes (default is false ). allowFreeURL CMD_ALLOW_FREEURL false or true Set to allow new note creation by accessing a nonexistent note URL. This is the behavior familiar from Etherpad . defaultPermission CMD_DEFAULT_PERMISSION editable , freely , limited , locked , protected or private Set notes default permission (only applied on signed-in users). sessionName connect.sid Cookie session name. sessionLife CMD_SESSION_LIFE 14 * 24 * 60 * 60 * 1000 , 1209600000 (14 days) Cookie session life time in milliseconds. sessionSecret CMD_SESSION_SECRET secret Cookie session secret used to sign the session cookie. If none is set, one will randomly generated on each startup, meaning all your users will be logged out.","title":"Users and Privileges"},{"location":"configuration/#login-methods","text":"","title":"Login methods"},{"location":"configuration/#email-local-account","text":"config file environment default and example value description email CMD_EMAIL true or false Set to allow email sign-in. The default is true . allowEmailRegister CMD_ALLOW_EMAIL_REGISTER true or false Set to allow registration of new accounts using an email address. If set to false , you can still create accounts using the command line - see bin/manage_users for details (In production mode, remember to run it with NODE_ENV set as production in the enviroment). This setting has no effect if email or CMD_EMAIL is false . The default for allowEmailRegister or CMD_ALLOW_EMAIL_REGISTER is true .","title":"Email (local account)"},{"location":"configuration/#dropbox-login","text":"config file environment default and example value description dropbox {clientID: ..., clientSecret: ...} An object containing the client ID and the client secret obtained by the Dropbox developer tools CMD_DROPBOX_CLIENTID no default Dropbox API client id CMD_DROPBOX_CLIENTSECRET no default Dropbox API client secret","title":"Dropbox Login"},{"location":"configuration/#facebook-login","text":"config file environment default and example value description facebook {clientID: ..., clientSecret: ...} An object containing the client ID and the client secret obtained by the Facebook app console CMD_FACEBOOK_CLIENTID no default Facebook API client id CMD_FACEBOOK_CLIENTSECRET no default Facebook API client secret","title":"Facebook Login"},{"location":"configuration/#github-login","text":"config file environment default and example value description github {clientID: ..., clientSecret: ...} An object containing the client ID and the client secret obtained by the GitHub developer page. For more details have a look at the GitHub auth guide . CMD_GITHUB_CLIENTID no default GitHub API client id CMD_GITHUB_CLIENTSECRET no default GitHub API client secret","title":"GitHub Login"},{"location":"configuration/#gitlab-login","text":"config file environment default and example value description gitlab {baseURL: ..., scope: ..., version: ..., clientID: ..., clientSecret: ...} An object containing your GitLab application data. Refer to the GitLab guide for more details! CMD_GITLAB_SCOPE no default , read_user or api GitLab API requested scope (default is api ) (GitLab snippet import/export need api scope) CMD_GITLAB_BASEURL no default GitLab authentication endpoint, set to use other endpoint than GitLab.com (optional) CMD_GITLAB_CLIENTID no default GitLab API client id CMD_GITLAB_CLIENTSECRET no default GitLab API client secret CMD_GITLAB_VERSION v4 GitLab API version (v3 or v4)","title":"GitLab Login"},{"location":"configuration/#google-login","text":"config file environment default and example value description google {clientID: ..., clientSecret: ..., hostedDomain: ...} An object containing the client ID and the client secret obtained by the Google API console CMD_GOOGLE_CLIENTID no default Google API client id CMD_GOOGLE_CLIENTSECRET no default Google API client secret CMD_GOOGLE_HOSTEDDOMAIN no default , example.com Provided only if the user belongs to a hosted domain. default is undefined","title":"Google Login"},{"location":"configuration/#ldap-login","text":"config file environment default and example value description ldap {providerName: ..., url: ..., bindDn: ..., bindCredentials: ..., searchBase: ..., searchFilter: ..., searchAttributes: ..., usernameField: ..., useridField: ..., tlsca: ...} An object detailing the LDAP connection. Refer to the LDAP-AD guide for more details! CMD_LDAP_URL no default , ldap://example.com URL of LDAP server CMD_LDAP_BINDDN no default bindDn for LDAP access CMD_LDAP_BINDCREDENTIALS no default , bindCredentials for LDAP access CMD_LDAP_SEARCHBASE no default , o=users,dc=example,dc=com LDAP directory to begin search from CMD_LDAP_SEARCHFILTER no default , (uid={{username}}) LDAP filter to search with CMD_LDAP_SEARCHATTRIBUTES no default , displayName, mail LDAP attributes to search with (use comma to separate) CMD_LDAP_USERIDFIELD no default , uidNumber or uid or sAMAccountName The LDAP field which is used uniquely identify a user on HedgeDoc CMD_LDAP_USERNAMEFIELD no default , fallback to userid The LDAP field which is used as the username on HedgeDoc CMD_LDAP_TLS_CA no default , server-cert.pem, root.pem Root CA for LDAP TLS in PEM format (use comma to separate) CMD_LDAP_PROVIDERNAME no default , My institution Optional name to be displayed at login form indicating the LDAP provider","title":"LDAP Login"},{"location":"configuration/#mattermost-login","text":"config file environment default and example value description mattermost {baseURL: ..., clientID: ..., clientSecret: ...} An object containing the base URL of your Mattermost application data. Refer to the Mattermost guide for more details! CMD_MATTERMOST_BASEURL no default Mattermost authentication endpoint for versions below 5.0. For Mattermost version 5.0 and above, see guide . CMD_MATTERMOST_CLIENTID no default Mattermost API client id CMD_MATTERMOST_CLIENTSECRET no default Mattermost API client secret","title":"Mattermost Login"},{"location":"configuration/#oauth2-login","text":"config file environment default and example value description oauth2 {baseURL: ..., userProfileURL: ..., userProfileUsernameAttr: ..., userProfileDisplayNameAttr: ..., userProfileEmailAttr: ..., tokenURL: ..., authorizationURL: ..., clientID: ..., clientSecret: ..., scope: ...} An object detailing your OAuth2 provider. Refer to the Mattermost or Nextcloud examples for more details! CMD_OAUTH2_USER_PROFILE_URL no default , https://example.com Where to retrieve information about a user after successful login. Needs to output JSON. (no default value) Refer to the Mattermost or Nextcloud examples for more details on all of the CMD_OAUTH2... options. CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR no default , name where to find the username in the JSON from the user profile URL. (no default value) CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR no default , display-name where to find the display-name in the JSON from the user profile URL. (no default value) CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR no default , email where to find the email address in the JSON from the user profile URL. (no default value) CMD_OAUTH2_USER_PROFILE_ID_ATTR no default , user_uuid where to find the dedicated user ID (optional, overrides CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR ) CMD_OAUTH2_TOKEN_URL no default , https://example.com sometimes called token endpoint, please refer to the documentation of your OAuth2 provider (no default value) CMD_OAUTH2_AUTHORIZATION_URL no default , https://example.com authorization URL of your provider, please refer to the documentation of your OAuth2 provider (no default value) CMD_OAUTH2_CLIENT_ID no default , afae02fckafd... you will get this from your OAuth2 provider when you register HedgeDoc as OAuth2-client, (no default value) CMD_OAUTH2_CLIENT_SECRET no default , afae02fckafd... you will get this from your OAuth2 provider when you register HedgeDoc as OAuth2-client, (no default value) CMD_OAUTH2_PROVIDERNAME no default , My institution Optional name to be displayed at login form indicating the oAuth2 provider CMD_OAUTH2_SCOPE no default , openid email profile Scope to request for OIDC (OpenID Connect) providers. CMD_OAUTH2_ROLES_CLAIM no default , roles ID token claim, which is supposed to provide an array of strings of roles CMD_OAUTH2_ACCESS_ROLE no default , role/hedgedoc The role which should be included in the ID token roles claim to grant access","title":"OAuth2 Login"},{"location":"configuration/#saml-login","text":"config file environment default and example value description saml {idpSsoUrl: ..., idpCert: ..., clientCert: ..., issuer: ..., identifierFormat: ..., disableRequestedAuthnContext: ..., groupAttribute: ..., externalGroups: [], requiredGroups: [], attribute: {id: ..., username: ..., email: ...}} An object detailing your SAML provider. Refer to the OneLogin and SAML guides for more details! CMD_SAML_IDPSSOURL no default , https://idp.example.com/sso authentication endpoint of IdP. for details, see guide . CMD_SAML_IDPCERT no default , /path/to/cert.pem certificate file path of IdP in PEM format CMD_SAML_CLIENTCERT no default , /path/to/privatecert.pem certificate file path for the client in PEM format (optional) CMD_SAML_ISSUER no default Issuer to supply to identity provider (optional, default: serverURL config)\" CMD_SAML_DISABLEREQUESTEDAUTHNCONTEXT no default , true or false true to allow any authentication method, false restricts to password authentication (PasswordProtectedTransport) method (default: false) CMD_SAML_IDENTIFIERFORMAT urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress name identifier format (optional, default: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress ) CMD_SAML_GROUPATTRIBUTE no default , memberOf attribute name for group list (optional) CMD_SAML_REQUIREDGROUPS no default , hedgedoc-users group names that allowed (use vertical bar to separate) (optional) CMD_SAML_EXTERNALGROUPS no default , Temporary-staff group names that not allowed (use vertical bar to separate) (optional) CMD_SAML_ATTRIBUTE_ID no default , sAMAccountName attribute map for id (optional, default: NameID of SAML response) CMD_SAML_ATTRIBUTE_USERNAME no default , mailNickname attribute map for username (optional, default: NameID of SAML response) CMD_SAML_ATTRIBUTE_EMAIL no default , mail attribute map for email (optional, default: NameID of SAML response if CMD_SAML_IDENTIFIERFORMAT is default)","title":"SAML Login"},{"location":"configuration/#twitter-login","text":"config file environment default and example value description twitter {consumerKey: ..., consumerSecret: ...} An object containing the consumer key and secret obtained by the Twitter developer tools . For more details have a look at the Twitter auth guide CMD_TWITTER_CONSUMERKEY no default Twitter API consumer key CMD_TWITTER_CONSUMERSECRET no default Twitter API consumer secret","title":"Twitter Login"},{"location":"configuration/#upload-storage","text":"These are only relevant when they are also configured in sync with their CMD_IMAGE_UPLOAD_TYPE . Also keep in mind, that filesystem is available, so you don't have to use either of these.","title":"Upload Storage"},{"location":"configuration/#amazon-s3","text":"config file environment default and example value description s3 { \"accessKeyId\": \"YOUR_S3_ACCESS_KEY_ID\", \"secretAccessKey\": \"YOUR_S3_ACCESS_KEY\", \"region\": \"YOUR_S3_REGION\" } When imageuploadtype be set to s3 , you would also need to setup this key, check our S3 Image Upload Guide CMD_S3_ACCESS_KEY_ID no default AWS access key id CMD_S3_SECRET_ACCESS_KEY no default AWS secret key CMD_S3_REGION no default , ap-northeast-1 AWS S3 region s3bucket CMD_S3_BUCKET no default AWS S3 bucket name CMD_S3_ENDPOINT ENV no default S3 API endpoint if you don't use AWS name","title":"Amazon S3"},{"location":"configuration/#azure-blob-storage","text":"config file environment default and example value description CMD_AZURE_CONNECTION_STRING no default Azure Blob Storage connection string CMD_AZURE_CONTAINER no default Azure Blob Storage container name (automatically created if non existent)","title":"Azure Blob Storage"},{"location":"configuration/#imgur","text":"config file environment default and example value description CMD_IMGUR_CLIENTID no default Imgur API client id","title":"imgur"},{"location":"configuration/#minio","text":"config file environment default and example value description minio { \"accessKey\": \"YOUR_MINIO_ACCESS_KEY\", \"secretKey\": \"YOUR_MINIO_SECRET_KEY\", \"endpoint\": \"YOUR_MINIO_HOST\", port: 9000, secure: true } When imageUploadType is set to minio , you need to set this key. Also check out our Minio Image Upload Guide CMD_MINIO_ACCESS_KEY no default Minio access key CMD_MINIO_SECRET_KEY no default Minio secret key CMD_MINIO_ENDPOINT no default , minio.example.org Address of your Minio endpoint/instance CMD_MINIO_PORT no default , 9000 Port that is used for your Minio instance CMD_MINIO_SECURE no default , true If set to true HTTPS is used for Minio","title":"Minio"},{"location":"configuration/#lutim","text":"config file environment default and example value description lutim {\"url\": \"YOUR_LUTIM_URL\"} When imageUploadType is set to lutim , you can setup the lutim url CMD_LUTIM_URL https://framapic.org/ When CMD_IMAGE_UPLOAD_TYPE is set to lutim , you can setup the lutim url","title":"Lutim"},{"location":"history/","text":"History of HedgeDoc \u00b6 It started with HackMD \u00b6 HackMD is the origin of this project, which was mostly developed by Max Wu and Yukai Huang. Originally, this was open source under MIT license, but was relicensed in October 2017 to be AGPLv3 . At the same time, hackmd.io was founded to offer a commercial version of HackMD. The AGPLv3-version was developed and released by the community, this was for a while referred to as \"HackMD community edition\". For more on the splitting of the projects, please refer to A note to our community (2017-10-11) . HackMD CE became CodiMD \u00b6 In June 2018, CodiMD was renamed from its former name \"HackMD\" and continued to be developed under AGPLv3 by the community. We decided to change the name to break the confusion between HackMD (enterprise offering) and CodiMD (community project), as people mistook it for an open core development model. For the whole renaming story, see the issue where the renaming was discussed . CodiMD went independent \u00b6 In March 2019, a discussion over licensing, governance and the future of CodiMD lead to the formation of a distinct GitHub organization. Up to that point, the community project resided in the organization of hackmdio but was for the most part self-organized. During that debate, we did not reach an agreement that would have allowed us to move the repository, so we simply forked it. We still welcome the HackMD team as part of our community, especially since a large portion of this code base originated with them. For the debate that lead to this step, please refer to the governance debate and the announcement of the new repository . CodiMD became HedgeDoc \u00b6 With two actively named forks sharing the same name, both insisting on being the original/actual owner of the name CodiMD , people became rightfully confused about the projects sharing the same name. After roughly a year of being stuck on the name issue, the HedgeDoc community decided to take action and started a renaming process in April 2020 . With a good head start in the amount of names, it was decided that an entire rebranding should take place and therefore, after a name was agreed on in July 2020 , the next step was to find a logo . In November of 2020, roughly 7 months after the initiative was started, a logo was found, the rebranding of the application as well as all community pages took place and the time of name conflicts was over. (hopefully.)","title":"History of HedgeDoc"},{"location":"history/#history-of-hedgedoc","text":"","title":"History of HedgeDoc"},{"location":"history/#it-started-with-hackmd","text":"HackMD is the origin of this project, which was mostly developed by Max Wu and Yukai Huang. Originally, this was open source under MIT license, but was relicensed in October 2017 to be AGPLv3 . At the same time, hackmd.io was founded to offer a commercial version of HackMD. The AGPLv3-version was developed and released by the community, this was for a while referred to as \"HackMD community edition\". For more on the splitting of the projects, please refer to A note to our community (2017-10-11) .","title":"It started with HackMD"},{"location":"history/#hackmd-ce-became-codimd","text":"In June 2018, CodiMD was renamed from its former name \"HackMD\" and continued to be developed under AGPLv3 by the community. We decided to change the name to break the confusion between HackMD (enterprise offering) and CodiMD (community project), as people mistook it for an open core development model. For the whole renaming story, see the issue where the renaming was discussed .","title":"HackMD CE became CodiMD"},{"location":"history/#codimd-went-independent","text":"In March 2019, a discussion over licensing, governance and the future of CodiMD lead to the formation of a distinct GitHub organization. Up to that point, the community project resided in the organization of hackmdio but was for the most part self-organized. During that debate, we did not reach an agreement that would have allowed us to move the repository, so we simply forked it. We still welcome the HackMD team as part of our community, especially since a large portion of this code base originated with them. For the debate that lead to this step, please refer to the governance debate and the announcement of the new repository .","title":"CodiMD went independent"},{"location":"history/#codimd-became-hedgedoc","text":"With two actively named forks sharing the same name, both insisting on being the original/actual owner of the name CodiMD , people became rightfully confused about the projects sharing the same name. After roughly a year of being stuck on the name issue, the HedgeDoc community decided to take action and started a renaming process in April 2020 . With a good head start in the amount of names, it was decided that an entire rebranding should take place and therefore, after a name was agreed on in July 2020 , the next step was to find a logo . In November of 2020, roughly 7 months after the initiative was started, a logo was found, the rebranding of the application as well as all community pages took place and the time of name conflicts was over. (hopefully.)","title":"CodiMD became HedgeDoc"},{"location":"slide-options/","text":"Slide Separators \u00b6 If you're getting started with reveal.js slides, there are a few things you need to know. There are two types of slides, those that transition horizontally and those that transition vertically (subslides). The following separators are used for each in the HedgeDoc syntax: # First Slide --- # Next slide ---- ## Subslide as you can see, horizontal transitions are separated by --- and vertical transitions by ---- Basic YAML header \u00b6 It's possible to customise the slide options using the YAML header in the slide markdown. eg: --- title: Example Slide tags: presentation slideOptions: theme: solarized transition: 'fade' # parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' --- make sure to have two spaces only at the start of the listed slide options. you can comment out options with a # Some other options \u00b6 # Display controls in the bottom right corner controls: true # Display a presentation progress bar progress: true # Set default timing of 2 minutes per slide defaultTiming: 120 # Display the page number of the current slide slideNumber: false # Push each slide change to the browser history history: false # Enable keyboard shortcuts for navigation keyboard: true # Enable the slide overview mode overview: true # Vertical centering of slides center: true # Enables touch navigation on devices with touch input touch: true # Loop the presentation loop: false # Change the presentation direction to be RTL rtl: false # Randomizes the order of slides each time the presentation loads shuffle: false # Turns fragments on and off globally fragments: true # Flags if the presentation is running in an embedded mode, # i.e. contained within a limited portion of the screen embedded: false # Flags if we should show a help overlay when the questionmark # key is pressed help: true # Flags if speaker notes should be visible to all viewers showNotes: false # Global override for autolaying embedded media (video/audio/iframe) # - null: Media will only autoplay if data-autoplay is present # - true: All media will autoplay, regardless of individual setting # - false: No media will autoplay, regardless of individual setting autoPlayMedia: null # Number of milliseconds between automatically proceeding to the # next slide, disabled when set to 0, this value can be overwritten # by using a data-autoslide attribute on your slides autoSlide: 0 # Stop auto-sliding after user input autoSlideStoppable: true # Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext # Enable slide navigation via mouse wheel mouseWheel: false # Hides the address bar on mobile devices hideAddressBar: true # Opens links in an iframe preview overlay previewLinks: false # Transition style transition: 'slide' # none/fade/slide/convex/concave/zoom # Transition speed transitionSpeed: 'default' # default/fast/slow # Transition style for full page slide backgrounds backgroundTransition: 'fade' # none/fade/slide/convex/concave/zoom # Number of slides away from the current that are visible viewDistance: 3 # Parallax background image parallaxBackgroundImage: '' # e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" # Parallax background size parallaxBackgroundSize: '' # CSS syntax, e.g. \"2100px 900px\" # Number of pixels to move the parallax background per slide # - Calculated automatically unless specified # - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null parallaxBackgroundVertical: null # The display mode that will be used to show slides display: 'block' Customising individual slides \u00b6 custom background image: --- <!-- .slide: data-background=\"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" --> #### testslide ---","title":"Slide Separators"},{"location":"slide-options/#slide-separators","text":"If you're getting started with reveal.js slides, there are a few things you need to know. There are two types of slides, those that transition horizontally and those that transition vertically (subslides). The following separators are used for each in the HedgeDoc syntax: # First Slide --- # Next slide ---- ## Subslide as you can see, horizontal transitions are separated by --- and vertical transitions by ----","title":"Slide Separators"},{"location":"slide-options/#basic-yaml-header","text":"It's possible to customise the slide options using the YAML header in the slide markdown. eg: --- title: Example Slide tags: presentation slideOptions: theme: solarized transition: 'fade' # parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' --- make sure to have two spaces only at the start of the listed slide options. you can comment out options with a #","title":"Basic YAML header"},{"location":"slide-options/#some-other-options","text":"# Display controls in the bottom right corner controls: true # Display a presentation progress bar progress: true # Set default timing of 2 minutes per slide defaultTiming: 120 # Display the page number of the current slide slideNumber: false # Push each slide change to the browser history history: false # Enable keyboard shortcuts for navigation keyboard: true # Enable the slide overview mode overview: true # Vertical centering of slides center: true # Enables touch navigation on devices with touch input touch: true # Loop the presentation loop: false # Change the presentation direction to be RTL rtl: false # Randomizes the order of slides each time the presentation loads shuffle: false # Turns fragments on and off globally fragments: true # Flags if the presentation is running in an embedded mode, # i.e. contained within a limited portion of the screen embedded: false # Flags if we should show a help overlay when the questionmark # key is pressed help: true # Flags if speaker notes should be visible to all viewers showNotes: false # Global override for autolaying embedded media (video/audio/iframe) # - null: Media will only autoplay if data-autoplay is present # - true: All media will autoplay, regardless of individual setting # - false: No media will autoplay, regardless of individual setting autoPlayMedia: null # Number of milliseconds between automatically proceeding to the # next slide, disabled when set to 0, this value can be overwritten # by using a data-autoslide attribute on your slides autoSlide: 0 # Stop auto-sliding after user input autoSlideStoppable: true # Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext # Enable slide navigation via mouse wheel mouseWheel: false # Hides the address bar on mobile devices hideAddressBar: true # Opens links in an iframe preview overlay previewLinks: false # Transition style transition: 'slide' # none/fade/slide/convex/concave/zoom # Transition speed transitionSpeed: 'default' # default/fast/slow # Transition style for full page slide backgrounds backgroundTransition: 'fade' # none/fade/slide/convex/concave/zoom # Number of slides away from the current that are visible viewDistance: 3 # Parallax background image parallaxBackgroundImage: '' # e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" # Parallax background size parallaxBackgroundSize: '' # CSS syntax, e.g. \"2100px 900px\" # Number of pixels to move the parallax background per slide # - Calculated automatically unless specified # - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null parallaxBackgroundVertical: null # The display mode that will be used to show slides display: 'block'","title":"Some other options"},{"location":"slide-options/#customising-individual-slides","text":"custom background image: --- <!-- .slide: data-background=\"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" --> #### testslide ---","title":"Customising individual slides"},{"location":"url-scheme/","text":"URL scheme \u00b6 HedgeDoc has three different modes for viewing a stored note. Each mode has a slightly different URL for accessing it. This document gives an overview about these URLs. We assume that you replace pad.example.com with the domain of your instance. Default (random) \u00b6 When you create a new note by clicking the \"New note\" button, your note is given a long random id and a random short-id. The long id is needed for accessing the editor and the live-update view. The short-id is used for the \"published\" version of a note that is read-only and does not update in realtime as well as for the presentation mode. example URL prefix mode content updates pad.example.com/Ndmv3oCyREKZMjSGR9uhnQ none editor in realtime pad.example.com/s/ByXF7k-YI s/ read-only version on reload pad.example.com/p/ByXF7k-YI p/ presentation mode on reload FreeURL mode \u00b6 If the setting CMD_ALLOW_FREEURL is enabled, users may create notes with a custom alias URL by just visiting the editor version of a custom alias. The published version and the presentation mode may also be accessed with the custom alias. example URL prefix mode content updates pad.example.com/my-awesome-note none editor in realtime pad.example.com/s/my-awesome-note s/ read-only version on reload pad.example.com/p/my-awesome-note p/ presentation mode on reload Different editor modes \u00b6 The editor has three different sub-modes. All of these update the content in realtime. example URL icon in the navbar behaviour pad.example.com/longnoteid?edit pencil Full-screen markdown editor for the content pad.example.com/longnoteid?view eye Full-screen view of the note without the editor pad.example.com/longnoteid?both columns markdown editor and view mode side-by-side","title":"URL scheme"},{"location":"url-scheme/#url-scheme","text":"HedgeDoc has three different modes for viewing a stored note. Each mode has a slightly different URL for accessing it. This document gives an overview about these URLs. We assume that you replace pad.example.com with the domain of your instance.","title":"URL scheme"},{"location":"url-scheme/#default-random","text":"When you create a new note by clicking the \"New note\" button, your note is given a long random id and a random short-id. The long id is needed for accessing the editor and the live-update view. The short-id is used for the \"published\" version of a note that is read-only and does not update in realtime as well as for the presentation mode. example URL prefix mode content updates pad.example.com/Ndmv3oCyREKZMjSGR9uhnQ none editor in realtime pad.example.com/s/ByXF7k-YI s/ read-only version on reload pad.example.com/p/ByXF7k-YI p/ presentation mode on reload","title":"Default (random)"},{"location":"url-scheme/#freeurl-mode","text":"If the setting CMD_ALLOW_FREEURL is enabled, users may create notes with a custom alias URL by just visiting the editor version of a custom alias. The published version and the presentation mode may also be accessed with the custom alias. example URL prefix mode content updates pad.example.com/my-awesome-note none editor in realtime pad.example.com/s/my-awesome-note s/ read-only version on reload pad.example.com/p/my-awesome-note p/ presentation mode on reload","title":"FreeURL mode"},{"location":"url-scheme/#different-editor-modes","text":"The editor has three different sub-modes. All of these update the content in realtime. example URL icon in the navbar behaviour pad.example.com/longnoteid?edit pencil Full-screen markdown editor for the content pad.example.com/longnoteid?view eye Full-screen view of the note without the editor pad.example.com/longnoteid?both columns markdown editor and view mode side-by-side","title":"Different editor modes"},{"location":"dev/api/","text":"API documentation \u00b6 Several tasks of HedgeDoc can be automated through HTTP requests. The available endpoints for this api are described in this document. For code-autogeneration there is an OpenAPIv3-compatible description available here . Notes \u00b6 These endpoints create notes, return information about them or export them. You have to replace \\<NOTE> with either the alias or id of a note you want to work on. Endpoint HTTP-Method Description /new GET Creates a new note. A random id will be assigned and the content will equal to the template (blank by default). After note creation a redirect is issued to the created note. /new POST Imports some markdown data into a new note. A random id will be assigned and the content will equal to the body of the received HTTP-request. The Content-Type: text/markdown header should be set on this request. /new/<ALIAS> POST Imports some markdown data into a new note with a given alias. This endpoint equals to the above one except that the alias from the url will be assigned to the note if FreeURL-mode is enabled. /<NOTE>/download or /s/<SHORT-ID>/download GET Returns the raw markdown content of a note. /<NOTE>/publish GET Redirects to the published version of the note. /<NOTE>/slide GET Redirects to the slide-presentation of the note. This is only useful on notes which are designed to be slides. /<NOTE>/info GET Returns metadata about the note. This includes the title and description of the note as well as the creation date and viewcount. The data is returned as a JSON object. /<NOTE>/revision GET Returns a list of the available note revisions. The list is returned as a JSON object with an array of revision-id and length associations. The revision-id equals to the timestamp when the revision was saved. /<NOTE>/revision/<REVISION-ID> GET Returns the revision of the note with some metadata. The revision is returned as a JSON object with the content of the note and the authorship. /<NOTE>/gist GET Creates a new GitHub Gist with the note's content. If GitHub integration is configured, the user will be redirected to GitHub and a new Gist with the content of the note will be created. User / History \u00b6 These endpoints return information about the current logged-in user and it's note history. If no user is logged-in, the most of this requests will fail with either a HTTP 403 or a JSON object containing {\"status\":\"forbidden\"} . Endpoint HTTP-Method Description /me GET Returns the profile data of the current logged-in user. The data is returned as a JSON object containing the user-id, the user's name and a url to the profile picture. /me/export GET Exports a zip-archive with all notes of the current user. /history GET Returns a list of the last viewed notes. The list is returned as a JSON object with an array containing for each entry it's id, title, tags, last visit time and pinned status. /history POST Replace user's history with a new one. The body must be form-encoded and contain a field history with a JSON-encoded array like its returned from the server when exporting the history. /history DELETE Deletes the user's history. /history/<NOTE> POST Toggles the pinned status in the history for a note. The body must be form-encoded and contain a field pinned that is either true or false . /history/<NOTE> DELETE Deletes a note from the user's history. HedgeDoc-server \u00b6 These endpoints return information about the running HedgeDoc instance. Endpoint HTTP-Method Description /status GET Returns the current status of the HedgeDoc instance. The data is returned as a JSON object containing the number of notes stored on the server, (distinct) online users and more.","title":"API"},{"location":"dev/api/#api-documentation","text":"Several tasks of HedgeDoc can be automated through HTTP requests. The available endpoints for this api are described in this document. For code-autogeneration there is an OpenAPIv3-compatible description available here .","title":"API documentation"},{"location":"dev/api/#notes","text":"These endpoints create notes, return information about them or export them. You have to replace \\<NOTE> with either the alias or id of a note you want to work on. Endpoint HTTP-Method Description /new GET Creates a new note. A random id will be assigned and the content will equal to the template (blank by default). After note creation a redirect is issued to the created note. /new POST Imports some markdown data into a new note. A random id will be assigned and the content will equal to the body of the received HTTP-request. The Content-Type: text/markdown header should be set on this request. /new/<ALIAS> POST Imports some markdown data into a new note with a given alias. This endpoint equals to the above one except that the alias from the url will be assigned to the note if FreeURL-mode is enabled. /<NOTE>/download or /s/<SHORT-ID>/download GET Returns the raw markdown content of a note. /<NOTE>/publish GET Redirects to the published version of the note. /<NOTE>/slide GET Redirects to the slide-presentation of the note. This is only useful on notes which are designed to be slides. /<NOTE>/info GET Returns metadata about the note. This includes the title and description of the note as well as the creation date and viewcount. The data is returned as a JSON object. /<NOTE>/revision GET Returns a list of the available note revisions. The list is returned as a JSON object with an array of revision-id and length associations. The revision-id equals to the timestamp when the revision was saved. /<NOTE>/revision/<REVISION-ID> GET Returns the revision of the note with some metadata. The revision is returned as a JSON object with the content of the note and the authorship. /<NOTE>/gist GET Creates a new GitHub Gist with the note's content. If GitHub integration is configured, the user will be redirected to GitHub and a new Gist with the content of the note will be created.","title":"Notes"},{"location":"dev/api/#user-history","text":"These endpoints return information about the current logged-in user and it's note history. If no user is logged-in, the most of this requests will fail with either a HTTP 403 or a JSON object containing {\"status\":\"forbidden\"} . Endpoint HTTP-Method Description /me GET Returns the profile data of the current logged-in user. The data is returned as a JSON object containing the user-id, the user's name and a url to the profile picture. /me/export GET Exports a zip-archive with all notes of the current user. /history GET Returns a list of the last viewed notes. The list is returned as a JSON object with an array containing for each entry it's id, title, tags, last visit time and pinned status. /history POST Replace user's history with a new one. The body must be form-encoded and contain a field history with a JSON-encoded array like its returned from the server when exporting the history. /history DELETE Deletes the user's history. /history/<NOTE> POST Toggles the pinned status in the history for a note. The body must be form-encoded and contain a field pinned that is either true or false . /history/<NOTE> DELETE Deletes a note from the user's history.","title":"User / History"},{"location":"dev/api/#hedgedoc-server","text":"These endpoints return information about the running HedgeDoc instance. Endpoint HTTP-Method Description /status GET Returns the current status of the HedgeDoc instance. The data is returned as a JSON object containing the number of notes stored on the server, (distinct) online users and more.","title":"HedgeDoc-server"},{"location":"dev/documentation/","text":"Documentation \u00b6 Our documentation is build with mkdocs . Writing \u00b6 All documentation files are found in the docs/content directory of the hedgedoc/hedgedoc repo . These files are just normal markdown files with nothing special about them. The configuration for mkdocs lies in the docs folder in a file called mkdocs.yml . With that file the theme and menu - amoung others - can be configured. Please note: Any new files need to be linked to by other files or put in the navigation or the files will be very hard to find on the documentation website. Building \u00b6 To build the documentation locally you need to perform the following steps: Make sure you have python3 installed. Go into the docs folder. Install all the dependencies (E.g. with a venv ) with pip install -r requirements.txt Start the mkdocs dev server ( mkdocs serve ) or build the documentation ( mkdocs build ). Deployment \u00b6 The documentation is deployed with Messor Structor . The necessary Dockerfile and version menu template and also the github action to build the whole documentation can be found in the docs.hedgedoc.org repo . This repo is also used to deploy the actuall website to github.io. Messor Structor builds and deploys the documentation by finding all branches that follow the pattern v* . For each branch the docs are generated separately by first installing the dependencies from requirements.txt and then running mkdocs. Afterwards the menu go template is used to include a version switcher in the theme.","title":"Documentation"},{"location":"dev/documentation/#documentation","text":"Our documentation is build with mkdocs .","title":"Documentation"},{"location":"dev/documentation/#writing","text":"All documentation files are found in the docs/content directory of the hedgedoc/hedgedoc repo . These files are just normal markdown files with nothing special about them. The configuration for mkdocs lies in the docs folder in a file called mkdocs.yml . With that file the theme and menu - amoung others - can be configured. Please note: Any new files need to be linked to by other files or put in the navigation or the files will be very hard to find on the documentation website.","title":"Writing"},{"location":"dev/documentation/#building","text":"To build the documentation locally you need to perform the following steps: Make sure you have python3 installed. Go into the docs folder. Install all the dependencies (E.g. with a venv ) with pip install -r requirements.txt Start the mkdocs dev server ( mkdocs serve ) or build the documentation ( mkdocs build ).","title":"Building"},{"location":"dev/documentation/#deployment","text":"The documentation is deployed with Messor Structor . The necessary Dockerfile and version menu template and also the github action to build the whole documentation can be found in the docs.hedgedoc.org repo . This repo is also used to deploy the actuall website to github.io. Messor Structor builds and deploys the documentation by finding all branches that follow the pattern v* . For each branch the docs are generated separately by first installing the dependencies from requirements.txt and then running mkdocs. Afterwards the menu go template is used to include a version switcher in the theme.","title":"Deployment"},{"location":"dev/getting-started/","text":"Getting started \u00b6 Preparing for running the code \u00b6 Notice: There's specialised instructions for docker or heroku , if you prefer running code this way! Clone the repository with git clone https://github.com/hedgedoc/hedgedoc.git hedgedoc-server (cloning is the preferred way, but you can also download and unzip a release) Enter the directory and run bin/setup , which will install npm dependencies and create configs. The setup script is written in Bash, you would need bash as a prerequisite. Setup the config file or set up environment variables . Running the Code \u00b6 Now that everything is in place, we can start HedgeDoc: yarn run build will build the frontend bundle. It uses webpack to do that. Run the server with node app.js Running the Code with Auto-Reload \u00b6 The commands above are fine for production, but you're a developer and surely you want to change things. You would need to restart both commands whenever you change something. Luckily, you can run these commands that will automatically rebuild the frontend or restart the server if necessary. The commands will stay active in your terminal, so you will need multiple tabs to run both at the same time. Use yarn run dev if you want webpack to continuously rebuild the frontend code. To auto-reload the server, the easiest method is to install nodemon and run nodemon --watch app.js --watch lib --watch locales app.js . Structure \u00b6 The repository contains two parts: a server (backend) and a client (frontend). most of the server code is in /lib and most of the client code is in public . hedgedoc-server/ \u251c\u2500\u2500 docs/ --- documentation \u251c\u2500\u2500 lib/ --- server code \u251c\u2500\u2500 test/ --- test suite \u2514\u2500\u2500 public/ --- client code \u251c\u2500\u2500 css/ --- css styles \u251c\u2500\u2500 docs/ --- default documents \u251c\u2500\u2500 js/ --- js scripts \u251c\u2500\u2500 vendor/ --- vendor includes \u2514\u2500\u2500 views/ --- view templates","title":"Getting Started"},{"location":"dev/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"dev/getting-started/#preparing-for-running-the-code","text":"Notice: There's specialised instructions for docker or heroku , if you prefer running code this way! Clone the repository with git clone https://github.com/hedgedoc/hedgedoc.git hedgedoc-server (cloning is the preferred way, but you can also download and unzip a release) Enter the directory and run bin/setup , which will install npm dependencies and create configs. The setup script is written in Bash, you would need bash as a prerequisite. Setup the config file or set up environment variables .","title":"Preparing for running the code"},{"location":"dev/getting-started/#running-the-code","text":"Now that everything is in place, we can start HedgeDoc: yarn run build will build the frontend bundle. It uses webpack to do that. Run the server with node app.js","title":"Running the Code"},{"location":"dev/getting-started/#running-the-code-with-auto-reload","text":"The commands above are fine for production, but you're a developer and surely you want to change things. You would need to restart both commands whenever you change something. Luckily, you can run these commands that will automatically rebuild the frontend or restart the server if necessary. The commands will stay active in your terminal, so you will need multiple tabs to run both at the same time. Use yarn run dev if you want webpack to continuously rebuild the frontend code. To auto-reload the server, the easiest method is to install nodemon and run nodemon --watch app.js --watch lib --watch locales app.js .","title":"Running the Code with Auto-Reload"},{"location":"dev/getting-started/#structure","text":"The repository contains two parts: a server (backend) and a client (frontend). most of the server code is in /lib and most of the client code is in public . hedgedoc-server/ \u251c\u2500\u2500 docs/ --- documentation \u251c\u2500\u2500 lib/ --- server code \u251c\u2500\u2500 test/ --- test suite \u2514\u2500\u2500 public/ --- client code \u251c\u2500\u2500 css/ --- css styles \u251c\u2500\u2500 docs/ --- default documents \u251c\u2500\u2500 js/ --- js scripts \u251c\u2500\u2500 vendor/ --- vendor includes \u2514\u2500\u2500 views/ --- view templates","title":"Structure"},{"location":"dev/ot/","text":"Operational Transformation \u00b6 From 0.3.2, we started supporting operational transformation. It makes concurrent editing safe and will not break up other users' operations. Additionally, now can show other clients' selections. See more at https://operational-transformation.github.io/ And even more in this 2010 article series: https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs_21.html https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs_22.html https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs.html","title":"Operational Transformation"},{"location":"dev/ot/#operational-transformation","text":"From 0.3.2, we started supporting operational transformation. It makes concurrent editing safe and will not break up other users' operations. Additionally, now can show other clients' selections. See more at https://operational-transformation.github.io/ And even more in this 2010 article series: https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs_21.html https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs_22.html https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs.html","title":"Operational Transformation"},{"location":"dev/webpack/","text":"Webpack \u00b6 Webpack is a JavaScript build system for frontend code. You can find out all about it on the webpack website . Here's how we're using it: webpack.common.js \u00b6 This file contains all common definitions for chunks and plugins that are needed by the whole app. The various entrypoints under the entry key define groups of files (npm packages or .css/.js files directly from this project) that need to be included together to be useful. The index group for example bundles all javascript files and libraries used for the note editor. Entrypoints are referenced in the plugins section. The HtmlWebpackPlugin uses templates in public/views/includes to include the path to the generated resources in new templates under public/views/build . These templates are then used by the backend to serve HTML to the browser. TODO: Document which entry points are used for what. webpack.htmlexport.js \u00b6 Separate config for the \"save as html\" feature. Packs all CSS from public/js/htmlExport.js to build/html.min.css . This file is then downloaded by client-side JS and used to create the HTML. See exportToHTML() in public/js/extra.js . webpack.dev.js \u00b6 The development config uses both common configs, enables development mode and enables \"cheap\" source maps (lines only). If you need more detailed source maps while developing, you might want to use the source-maps option. See https://webpack.js.org/configuration/devtool/ for details. webpack.prod.js \u00b6 The production config uses both common configs and enables production mode. This automatically enables various optimizations (e.g. UglifyJS). See https://webpack.js.org/concepts/mode/ for details. For the global app config, the name of the emitted chunks is changed to include the content hash. See https://webpack.js.org/guides/caching/ on why this is a good idea. For the HTML export config, CSS minification is enabled.","title":"Webpack"},{"location":"dev/webpack/#webpack","text":"Webpack is a JavaScript build system for frontend code. You can find out all about it on the webpack website . Here's how we're using it:","title":"Webpack"},{"location":"dev/webpack/#webpackcommonjs","text":"This file contains all common definitions for chunks and plugins that are needed by the whole app. The various entrypoints under the entry key define groups of files (npm packages or .css/.js files directly from this project) that need to be included together to be useful. The index group for example bundles all javascript files and libraries used for the note editor. Entrypoints are referenced in the plugins section. The HtmlWebpackPlugin uses templates in public/views/includes to include the path to the generated resources in new templates under public/views/build . These templates are then used by the backend to serve HTML to the browser. TODO: Document which entry points are used for what.","title":"webpack.common.js"},{"location":"dev/webpack/#webpackhtmlexportjs","text":"Separate config for the \"save as html\" feature. Packs all CSS from public/js/htmlExport.js to build/html.min.css . This file is then downloaded by client-side JS and used to create the HTML. See exportToHTML() in public/js/extra.js .","title":"webpack.htmlexport.js"},{"location":"dev/webpack/#webpackdevjs","text":"The development config uses both common configs, enables development mode and enables \"cheap\" source maps (lines only). If you need more detailed source maps while developing, you might want to use the source-maps option. See https://webpack.js.org/configuration/devtool/ for details.","title":"webpack.dev.js"},{"location":"dev/webpack/#webpackprodjs","text":"The production config uses both common configs and enables production mode. This automatically enables various optimizations (e.g. UglifyJS). See https://webpack.js.org/concepts/mode/ for details. For the global app config, the name of the emitted chunks is changed to include the content hash. See https://webpack.js.org/guides/caching/ on why this is a good idea. For the HTML export config, CSS minification is enabled.","title":"webpack.prod.js"},{"location":"guides/migrate-etherpad/","text":"Pad migration guide from etherpad-lite \u00b6 The goal of this migration is to do a \"dumb\" import from all the pads in Etherpad, to notes in HedgeDoc. In particular, the url locations of the pads in Etherpad will be lost. Furthermore, any metadata in Etherpad, such as revisions, author data and also formatted text will not be migrated to HedgeDoc (only the plain text contents). Note that this guide is not really meant as a support guide. I migrated my own Etherpad to HedgeDoc, and it turned out to be quite easy in my opinion. In this guide I share my experience. Stuff may require some creativity to work properly in your case. When I wrote this guide, I was using etherpad 1.7.0 and codimd 1.2.1 . Good luck! 0. Requirements \u00b6 curl running Etherpad server running HedgeDoc server hedgedoc-cli 1. Retrieve the list of pads \u00b6 First, compose a list of all the pads that you want to have migrated from your Etherpad. Other than the admin interface, Etherpad does not have a dedicated function to dump a list of all the pads. However, the Etherpad wiki explains how to list all the pads by talking directly to the database . You will end up with a file containing a pad name on each line: date-ideas groceries london weddingchecklist (...) 2. Run the migration \u00b6 Download hedgedoc-cli and put the script in the same directory as the file containing the pad names. Add to this directory the file listed below, I called it migrate-etherpad.sh . Modify at least the configuration settings ETHERPAD_SERVER and HEDGEDOC_SERVER . #!/bin/sh # migrate-etherpad.sh # # Description: Migrate pads from etherpad to HedgeDoc # Author: Daan Sprenkels <hello@dsprenkels.com> # This script uses the HedgeDoc command line script[1] to import a list of pads from # [1]: https://github.com/hedgedoc/cli/blob/master/bin/hedgedoc # The base url to where etherpad is hosted ETHERPAD_SERVER=\"https://etherpad.example.com\" # The base url where HedgeDoc is hosted HEDGEDOC_SERVER=\"https://hedgedoc.example.com\" # Write a list of pads and the urls which they were migrated to REDIRECTS_FILE=\"redirects.txt\" # Fail if not called correctly if (( $# != 1 )); then echo \"Usage: $0 PAD_NAMES_FILE\" exit 2 fi # Do the migration for PAD_NAME in $1; do # Download the pad PAD_FILE=\"$(mktemp)\" curl \"$ETHERPAD_SERVER/p/$PAD_NAME/export/txt\" >\"$PAD_FILE\" # Import the pad into HedgeDoc OUTPUT=\"$(./hedgedoc import \"$PAD_FILE\")\" echo \"$PAD_NAME -> $OUTPUT\" >>\"$REDIRECTS_FILE\" done Call this file like this: ./migrate-etherpad.sh pad_names.txt This will download all the pads in pad_names.txt and put them on HedgeDoc. They will get assigned random ids, so you won't be able to find them. The script will save the mappings to a file though (in my case redirects.txt ). You can use this file to redirect your users when they visit your etherpad using a 301 Permanent Redirect status code (see the next section). 3. Setup redirects (optional) \u00b6 I got a redirects.txt file that looked a bit like this: date-ideas -> Found. Redirecting to https://hedgedoc.example.com/mPt0KfiKSBOTQ3mNcdfn groceries -> Found. Redirecting to https://hedgedoc.example.com/UukqgwLfhYyUUtARlcJ2_y london -> Found. Redirecting to https://hedgedoc.example.com/_d3wa-BE8t4Swv5w7O2_9R weddingchecklist -> Found. Redirecting to https://hedgedoc.example.com/XcQGqlBjl0u40wfT0N8TzQ (...) Using some sed magic, I changed it to an nginx config snippet: location = /p/date-ideas { return 301 https://hedgedoc.example.com/mPt0M1KfiKSBOTQ3mNcdfn; } location = /p/groceries { return 301 https://hedgedoc.example.com/UukqgwLfhYyUUtARlcJ2_y; } location = /p/london { return 301 https://hedgedoc.example.com/_d3wa-BE8t4Swv5w7O2_9R; } location = /p/weddingchecklist { return 301 https://hedgedoc.example.com/XcQGqlBjl0u40wfT0N8TzQ; } I put this file into my etherpad.example.com nginx config, such that all the users would be redirected accordingly.","title":"Migrate from Etherpad"},{"location":"guides/migrate-etherpad/#pad-migration-guide-from-etherpad-lite","text":"The goal of this migration is to do a \"dumb\" import from all the pads in Etherpad, to notes in HedgeDoc. In particular, the url locations of the pads in Etherpad will be lost. Furthermore, any metadata in Etherpad, such as revisions, author data and also formatted text will not be migrated to HedgeDoc (only the plain text contents). Note that this guide is not really meant as a support guide. I migrated my own Etherpad to HedgeDoc, and it turned out to be quite easy in my opinion. In this guide I share my experience. Stuff may require some creativity to work properly in your case. When I wrote this guide, I was using etherpad 1.7.0 and codimd 1.2.1 . Good luck!","title":"Pad migration guide from etherpad-lite"},{"location":"guides/migrate-etherpad/#0-requirements","text":"curl running Etherpad server running HedgeDoc server hedgedoc-cli","title":"0. Requirements"},{"location":"guides/migrate-etherpad/#1-retrieve-the-list-of-pads","text":"First, compose a list of all the pads that you want to have migrated from your Etherpad. Other than the admin interface, Etherpad does not have a dedicated function to dump a list of all the pads. However, the Etherpad wiki explains how to list all the pads by talking directly to the database . You will end up with a file containing a pad name on each line: date-ideas groceries london weddingchecklist (...)","title":"1. Retrieve the list of pads"},{"location":"guides/migrate-etherpad/#2-run-the-migration","text":"Download hedgedoc-cli and put the script in the same directory as the file containing the pad names. Add to this directory the file listed below, I called it migrate-etherpad.sh . Modify at least the configuration settings ETHERPAD_SERVER and HEDGEDOC_SERVER . #!/bin/sh # migrate-etherpad.sh # # Description: Migrate pads from etherpad to HedgeDoc # Author: Daan Sprenkels <hello@dsprenkels.com> # This script uses the HedgeDoc command line script[1] to import a list of pads from # [1]: https://github.com/hedgedoc/cli/blob/master/bin/hedgedoc # The base url to where etherpad is hosted ETHERPAD_SERVER=\"https://etherpad.example.com\" # The base url where HedgeDoc is hosted HEDGEDOC_SERVER=\"https://hedgedoc.example.com\" # Write a list of pads and the urls which they were migrated to REDIRECTS_FILE=\"redirects.txt\" # Fail if not called correctly if (( $# != 1 )); then echo \"Usage: $0 PAD_NAMES_FILE\" exit 2 fi # Do the migration for PAD_NAME in $1; do # Download the pad PAD_FILE=\"$(mktemp)\" curl \"$ETHERPAD_SERVER/p/$PAD_NAME/export/txt\" >\"$PAD_FILE\" # Import the pad into HedgeDoc OUTPUT=\"$(./hedgedoc import \"$PAD_FILE\")\" echo \"$PAD_NAME -> $OUTPUT\" >>\"$REDIRECTS_FILE\" done Call this file like this: ./migrate-etherpad.sh pad_names.txt This will download all the pads in pad_names.txt and put them on HedgeDoc. They will get assigned random ids, so you won't be able to find them. The script will save the mappings to a file though (in my case redirects.txt ). You can use this file to redirect your users when they visit your etherpad using a 301 Permanent Redirect status code (see the next section).","title":"2. Run the migration"},{"location":"guides/migrate-etherpad/#3-setup-redirects-optional","text":"I got a redirects.txt file that looked a bit like this: date-ideas -> Found. Redirecting to https://hedgedoc.example.com/mPt0KfiKSBOTQ3mNcdfn groceries -> Found. Redirecting to https://hedgedoc.example.com/UukqgwLfhYyUUtARlcJ2_y london -> Found. Redirecting to https://hedgedoc.example.com/_d3wa-BE8t4Swv5w7O2_9R weddingchecklist -> Found. Redirecting to https://hedgedoc.example.com/XcQGqlBjl0u40wfT0N8TzQ (...) Using some sed magic, I changed it to an nginx config snippet: location = /p/date-ideas { return 301 https://hedgedoc.example.com/mPt0M1KfiKSBOTQ3mNcdfn; } location = /p/groceries { return 301 https://hedgedoc.example.com/UukqgwLfhYyUUtARlcJ2_y; } location = /p/london { return 301 https://hedgedoc.example.com/_d3wa-BE8t4Swv5w7O2_9R; } location = /p/weddingchecklist { return 301 https://hedgedoc.example.com/XcQGqlBjl0u40wfT0N8TzQ; } I put this file into my etherpad.example.com nginx config, such that all the users would be redirected accordingly.","title":"3. Setup redirects (optional)"},{"location":"guides/migrations-and-breaking-changes/","text":"Migrations and Notable Changes \u00b6 Migrating to 1.4.0 \u00b6 We dropped support for node 6 with this version. If you have any trouble running this version, please double check that you are running at least node 8! Migrating to 1.3.2 \u00b6 This is not a breaking change, but to stay up to date with the community repository, you may need to update a few urls. This is not a breaking change. See more at issue #10 Native setup using git \u00b6 Change the upstream remote using git remote set-url origin https://github.com/hedgedoc/hedgedoc.git . Docker \u00b6 When you use our container repository (which was previously hedgedoc-container ) all you can simply run git pull and your docker-compose.yml will be updated. When you setup things yourself, make sure you use the new image: quay.io/hedgedoc/hedgedoc . Heroku \u00b6 All you need to do is disconnect GitHub and reconnect it with this new repository. Or you can use our Heroku button and redeploy your instance and link the old database again. Migrating to 1.1.0 \u00b6 We deprecated the older lower case config style and moved on to camel case style. Please have a look at the current config.json.example and check the warnings on startup. Notice: This is not a breaking change right now but will be in the future Migrating to 0.5.0 \u00b6 migration-to-0.5.0 migration tool We don't use LZString to compress socket.io data and DB data after version 0.5.0. Please run the migration tool if you're upgrading from the old version. Migrating to 0.4.0 \u00b6 migration-to-0.4.0 migration tool We've dropped MongoDB after version 0.4.0. So here is the migration tool for you to transfer the old DB data to the new DB. This tool is also used for official service.","title":"Breaking Changes"},{"location":"guides/migrations-and-breaking-changes/#migrations-and-notable-changes","text":"","title":"Migrations and Notable Changes"},{"location":"guides/migrations-and-breaking-changes/#migrating-to-140","text":"We dropped support for node 6 with this version. If you have any trouble running this version, please double check that you are running at least node 8!","title":"Migrating to 1.4.0"},{"location":"guides/migrations-and-breaking-changes/#migrating-to-132","text":"This is not a breaking change, but to stay up to date with the community repository, you may need to update a few urls. This is not a breaking change. See more at issue #10","title":"Migrating to 1.3.2"},{"location":"guides/migrations-and-breaking-changes/#native-setup-using-git","text":"Change the upstream remote using git remote set-url origin https://github.com/hedgedoc/hedgedoc.git .","title":"Native setup using git"},{"location":"guides/migrations-and-breaking-changes/#docker","text":"When you use our container repository (which was previously hedgedoc-container ) all you can simply run git pull and your docker-compose.yml will be updated. When you setup things yourself, make sure you use the new image: quay.io/hedgedoc/hedgedoc .","title":"Docker"},{"location":"guides/migrations-and-breaking-changes/#heroku","text":"All you need to do is disconnect GitHub and reconnect it with this new repository. Or you can use our Heroku button and redeploy your instance and link the old database again.","title":"Heroku"},{"location":"guides/migrations-and-breaking-changes/#migrating-to-110","text":"We deprecated the older lower case config style and moved on to camel case style. Please have a look at the current config.json.example and check the warnings on startup. Notice: This is not a breaking change right now but will be in the future","title":"Migrating to 1.1.0"},{"location":"guides/migrations-and-breaking-changes/#migrating-to-050","text":"migration-to-0.5.0 migration tool We don't use LZString to compress socket.io data and DB data after version 0.5.0. Please run the migration tool if you're upgrading from the old version.","title":"Migrating to 0.5.0"},{"location":"guides/migrations-and-breaking-changes/#migrating-to-040","text":"migration-to-0.4.0 migration tool We've dropped MongoDB after version 0.4.0. So here is the migration tool for you to transfer the old DB data to the new DB. This tool is also used for official service.","title":"Migrating to 0.4.0"},{"location":"guides/minio-image-upload/","text":"Minio Guide for HedgeDoc \u00b6 Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! First of all you need to setup Minio itself. Please refer to the official Minio docs for an production setup. For checking it out and development purposes a non-persistent setup is enough: sh docker run --name test-minio --rm -d -p 9000:9000 minio/minio server /data Please notice this is not for productive use as all your data gets lost when you stop this container Next step is to get the credentials form the container: sh docker logs test-minio Open http://localhost:9000 and login with the shown credentials. Create a bucket for HedgeDoc Add a policy for the prefix uploads and make it read-only. Open policy editor Add policy for uploads Set credentials and configs for Minio in HedgeDoc's config.json JSON \"minio\": { \"accessKey\": \"888MXJ7EP4XXXXXXXXX\", \"secretKey\": \"yQS2EbM1Y6IJrp/1BUKWq2/XXXXXXXXXXXXXXX\", \"endPoint\": \"localhost\", \"port\": 9000, \"secure\": false } You have to use different values for endpoint and port for a production setup. Keep in mind the endpoint -address has to be public accessible from your browser. Set bucket name JSON \"s3bucket\": \"hedgedoc\" Set upload type. JSON \"imageuploadtype\": \"minio\" Review your config. json { // all your other config\u2026 \"minio\": { \"accessKey\": \"888MXJ7EP4XXXXXXXXX\", \"secretKey\": \"yQS2EbM1Y6IJrp/1BUKWq2/XXXXXXXXXXXXXXX\", \"endPoint\": \"localhost\", \"port\": 9000, \"secure\": false }, \"s3bucket\": \"hedgedoc\", \"imageuploadtype\": \"minio\" } If you were using filesystem before and you want to migrate assets to minio. You could use a convenience script located in bin/migrate_from_fs_to_minio . Be careful, read carefully what it does, it was not tested in all environments. Take it as an inspiration to make your own migration script.","title":"Minion"},{"location":"guides/minio-image-upload/#minio-guide-for-hedgedoc","text":"Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! First of all you need to setup Minio itself. Please refer to the official Minio docs for an production setup. For checking it out and development purposes a non-persistent setup is enough: sh docker run --name test-minio --rm -d -p 9000:9000 minio/minio server /data Please notice this is not for productive use as all your data gets lost when you stop this container Next step is to get the credentials form the container: sh docker logs test-minio Open http://localhost:9000 and login with the shown credentials. Create a bucket for HedgeDoc Add a policy for the prefix uploads and make it read-only. Open policy editor Add policy for uploads Set credentials and configs for Minio in HedgeDoc's config.json JSON \"minio\": { \"accessKey\": \"888MXJ7EP4XXXXXXXXX\", \"secretKey\": \"yQS2EbM1Y6IJrp/1BUKWq2/XXXXXXXXXXXXXXX\", \"endPoint\": \"localhost\", \"port\": 9000, \"secure\": false } You have to use different values for endpoint and port for a production setup. Keep in mind the endpoint -address has to be public accessible from your browser. Set bucket name JSON \"s3bucket\": \"hedgedoc\" Set upload type. JSON \"imageuploadtype\": \"minio\" Review your config. json { // all your other config\u2026 \"minio\": { \"accessKey\": \"888MXJ7EP4XXXXXXXXX\", \"secretKey\": \"yQS2EbM1Y6IJrp/1BUKWq2/XXXXXXXXXXXXXXX\", \"endPoint\": \"localhost\", \"port\": 9000, \"secure\": false }, \"s3bucket\": \"hedgedoc\", \"imageuploadtype\": \"minio\" } If you were using filesystem before and you want to migrate assets to minio. You could use a convenience script located in bin/migrate_from_fs_to_minio . Be careful, read carefully what it does, it was not tested in all environments. Take it as an inspiration to make your own migration script.","title":"Minio Guide for HedgeDoc"},{"location":"guides/providing-terms/","text":"How to set up your terms of use \u00b6 Setup your terms of use \u00b6 To setup your terms of use, you need to provide a document called terms-of-use.md which contains them. Of course written in Markdown. It has to be provided under ./public/docs/ and will be automatically turned into a HedgeDoc document. It will also automatically updated as soon as you change the document on disk. As soon as the file exists a link will show up in the bottom part along with the release notes and link to them. Setup your privacy policy \u00b6 To add a privacy policy you can use the same technique as for the terms of use. The main difference is that the document is called privacy.md . See our example file ./public/docs/privacy.md.example container some useful hints for writing your own privacy policy. As with the terms of use, a link to the privacy notices will show up in the area where the release notes are provided on the index page. Setup your imprint \u00b6 To add an imprint you can use the same technique as for the terms of use. The main difference is that the document is called imprint.md . It has to be provided under ./public/docs/ and will be automatically turned into a HedgeDoc document. It will also automatically updated as soon as you change the document on disk. As with the terms of use, a link to the imprint will show up in the area where the release notes are provided on the index page.","title":"Setting Terms"},{"location":"guides/providing-terms/#how-to-set-up-your-terms-of-use","text":"","title":"How to set up your terms of use"},{"location":"guides/providing-terms/#setup-your-terms-of-use","text":"To setup your terms of use, you need to provide a document called terms-of-use.md which contains them. Of course written in Markdown. It has to be provided under ./public/docs/ and will be automatically turned into a HedgeDoc document. It will also automatically updated as soon as you change the document on disk. As soon as the file exists a link will show up in the bottom part along with the release notes and link to them.","title":"Setup your terms of use"},{"location":"guides/providing-terms/#setup-your-privacy-policy","text":"To add a privacy policy you can use the same technique as for the terms of use. The main difference is that the document is called privacy.md . See our example file ./public/docs/privacy.md.example container some useful hints for writing your own privacy policy. As with the terms of use, a link to the privacy notices will show up in the area where the release notes are provided on the index page.","title":"Setup your privacy policy"},{"location":"guides/providing-terms/#setup-your-imprint","text":"To add an imprint you can use the same technique as for the terms of use. The main difference is that the document is called imprint.md . It has to be provided under ./public/docs/ and will be automatically turned into a HedgeDoc document. It will also automatically updated as soon as you change the document on disk. As with the terms of use, a link to the imprint will show up in the area where the release notes are provided on the index page.","title":"Setup your imprint"},{"location":"guides/s3-image-upload/","text":"Guide - Setup HedgeDoc S3 image upload \u00b6 Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Go to AWS S3 console and create a new bucket. Click on bucket, select Properties on the side panel, and find Permission section. Click Edit bucket policy . Enter the following policy, replace bucket_name with your bucket name: json { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::bucket_name/uploads/*\" } ] } Go to IAM console and create a new IAM user. Remember your user credentials( key / access token ) Enter user page, select Permission tab, look at Inline Policies section, and click Create User Policy Select Custom Policy Enter the following policy, replace bucket_name with your bucket name: json { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:*\" ], \"Resource\": [ \"arn:aws:s3:::bucket_name/uploads/*\" ] } ] } Edit config.json and set following keys: javascript { \"production\": { ... \"imageuploadtype\": \"s3\", \"s3\": { \"accessKeyId\": \"YOUR_S3_ACCESS_KEY_ID\", \"secretAccessKey\": \"YOUR_S3_ACCESS_KEY\", \"region\": \"YOUR_S3_REGION\" // example: ap-northeast-1 }, \"s3bucket\": \"YOUR_S3_BUCKET_NAME\" } } In additional to edit config.json directly, you could also try environment variables . Related Tools \u00b6 AWS Policy Generator","title":"S3"},{"location":"guides/s3-image-upload/#guide-setup-hedgedoc-s3-image-upload","text":"Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Go to AWS S3 console and create a new bucket. Click on bucket, select Properties on the side panel, and find Permission section. Click Edit bucket policy . Enter the following policy, replace bucket_name with your bucket name: json { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::bucket_name/uploads/*\" } ] } Go to IAM console and create a new IAM user. Remember your user credentials( key / access token ) Enter user page, select Permission tab, look at Inline Policies section, and click Create User Policy Select Custom Policy Enter the following policy, replace bucket_name with your bucket name: json { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:*\" ], \"Resource\": [ \"arn:aws:s3:::bucket_name/uploads/*\" ] } ] } Edit config.json and set following keys: javascript { \"production\": { ... \"imageuploadtype\": \"s3\", \"s3\": { \"accessKeyId\": \"YOUR_S3_ACCESS_KEY_ID\", \"secretAccessKey\": \"YOUR_S3_ACCESS_KEY\", \"region\": \"YOUR_S3_REGION\" // example: ap-northeast-1 }, \"s3bucket\": \"YOUR_S3_BUCKET_NAME\" } } In additional to edit config.json directly, you could also try environment variables .","title":"Guide - Setup HedgeDoc S3 image upload"},{"location":"guides/s3-image-upload/#related-tools","text":"AWS Policy Generator","title":"Related Tools"},{"location":"guides/auth/github/","text":"Authentication guide - GitHub \u00b6 Sign-in or sign-up for a GitHub account Navigate to developer settings in your GitHub account here and select the \"OAuth Apps\" tab Click on the New OAuth App button, to create a new OAuth App: Fill out the new OAuth application registration form, and click Register Application Note: The callback URL is /auth/github/callback After successfully registering the application, you'll receive the Client ID and Client Secret for the application Add the Client ID and Client Secret to your config.json file or pass them as environment variables config.json : js { \"production\": { \"github\": { \"clientID\": \"3747d30eaccXXXXXXXXX\", \"clientSecret\": \"2a8e682948eee0c580XXXXXXXXXXXXXXXXXXXXXX\" } } } environment variables: ```sh CMD_GITHUB_CLIENTID=3747d30eaccXXXXXXXXX CMD_GITHUB_CLIENTSECRET=2a8e682948eee0c580XXXXXXXXXXXXXXXXXXXXXX ````","title":"GitHub"},{"location":"guides/auth/github/#authentication-guide-github","text":"Sign-in or sign-up for a GitHub account Navigate to developer settings in your GitHub account here and select the \"OAuth Apps\" tab Click on the New OAuth App button, to create a new OAuth App: Fill out the new OAuth application registration form, and click Register Application Note: The callback URL is /auth/github/callback After successfully registering the application, you'll receive the Client ID and Client Secret for the application Add the Client ID and Client Secret to your config.json file or pass them as environment variables config.json : js { \"production\": { \"github\": { \"clientID\": \"3747d30eaccXXXXXXXXX\", \"clientSecret\": \"2a8e682948eee0c580XXXXXXXXXXXXXXXXXXXXXX\" } } } environment variables: ```sh CMD_GITHUB_CLIENTID=3747d30eaccXXXXXXXXX CMD_GITHUB_CLIENTSECRET=2a8e682948eee0c580XXXXXXXXXXXXXXXXXXXXXX ````","title":"Authentication guide - GitHub"},{"location":"guides/auth/gitlab-self-hosted/","text":"GitLab (self-hosted) \u00b6 Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Sign in to your GitLab Navigate to the application management page at https://your.gitlab.domain/admin/applications (admin permissions required) Click New application to create a new application and fill out the registration form: Click Submit In the list of applications select HackMD . Leave that site open to copy the application ID and secret in the next step. In the docker-compose.yml add the following environment variables to app: environment: - CMD_DOMAIN=your.hedgedoc.domain - CMD_URL_ADDPORT=true - CMD_PROTOCOL_USESSL=true - CMD_GITLAB_BASEURL=https://your.gitlab.domain - CMD_GITLAB_CLIENTID=23462a34example99XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX - CMD_GITLAB_CLIENTSECRET=5532e9dexamplXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Run docker-compose up -d to apply your settings. Sign in to your HedgeDoc using your GitLab ID:","title":"GitLab"},{"location":"guides/auth/gitlab-self-hosted/#gitlab-self-hosted","text":"Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Sign in to your GitLab Navigate to the application management page at https://your.gitlab.domain/admin/applications (admin permissions required) Click New application to create a new application and fill out the registration form: Click Submit In the list of applications select HackMD . Leave that site open to copy the application ID and secret in the next step. In the docker-compose.yml add the following environment variables to app: environment: - CMD_DOMAIN=your.hedgedoc.domain - CMD_URL_ADDPORT=true - CMD_PROTOCOL_USESSL=true - CMD_GITLAB_BASEURL=https://your.gitlab.domain - CMD_GITLAB_CLIENTID=23462a34example99XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX - CMD_GITLAB_CLIENTSECRET=5532e9dexamplXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Run docker-compose up -d to apply your settings. Sign in to your HedgeDoc using your GitLab ID:","title":"GitLab (self-hosted)"},{"location":"guides/auth/keycloak/","text":"OAuth with Keycloak/Red Hat SSO (self-hosted) \u00b6 Prerequisites \u00b6 This guide assumes you have run and configured Keycloak. If you'd like to meet this prerequisite quickly, it can be achieved by running a jboss/keycloak container and attaching it to your network. Set the environment variables KEYCLOAK_USER and KEYCLOAK_PASSWORD , and expose port 8080. Where HTTPS is specified throughout, use HTTP instead. You may also have to specify the exposed port, 8080. Steps \u00b6 Sign in to the administration portal for your Keycloak instance at https://keycloak.example.com/auth/admin/master/console You may note that a separate realm is specified throughout this tutorial. It is best practice not to use the master realm, as it normally contains the realm-management client that federates access using the policies and permissions you can create. Navigate to the client management page at https://keycloak.example.com/auth/admin/master/console/#/realms/your-realm/clients (admin permissions required) Click Create to create a new client and fill out the registration form. You should set the Root URL to the fully qualified public URL of your HedgeDoc instance. Click Save Set the Access Type of the client to confidential . This will make your client require a client secret upon authentication. Additional steps to circumvent generic OAuth2 issue \u00b6 Select Client Scopes from the sidebar, and begin to create a new client scope using the Create button. Ensure that the Name field is set to id . Create a new mapper under the Mappers tab. This should reference the User Property id . Claim JSON Type should be String and all switches below should be enabled. Save the mapper. Go to the client you set up in the previous steps using the Clients page, then choose the Client Scopes tab. Apply the scope you've created. This should mitigate errors as seen in hedgedoc/hedgedoc#56 , as the /userinfo endpoint should now bring back the user's ID under the id key as well as sub . In the docker-compose.yml add the following environment variables to app: environment: CMD_OAUTH2_USER_PROFILE_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/userinfo CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=preferred_username CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=name CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email CMD_OAUTH2_TOKEN_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/token CMD_OAUTH2_AUTHORIZATION_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/auth CMD_OAUTH2_CLIENT_ID=<your client ID> CMD_OAUTH2_CLIENT_SECRET=<your client secret, which you can find under the Credentials tab for your client> CMD_OAUTH2_PROVIDERNAME=Keycloak CMD_DOMAIN=<hedgedoc.example.com> CMD_PROTOCOL_USESSL=true CMD_URL_ADDPORT=false Run docker-compose up -d to apply your settings. Sign in to your HedgeDoc using your Keycloak ID","title":"Keycloak"},{"location":"guides/auth/keycloak/#oauth-with-keycloakred-hat-sso-self-hosted","text":"","title":"OAuth with Keycloak/Red Hat SSO (self-hosted)"},{"location":"guides/auth/keycloak/#prerequisites","text":"This guide assumes you have run and configured Keycloak. If you'd like to meet this prerequisite quickly, it can be achieved by running a jboss/keycloak container and attaching it to your network. Set the environment variables KEYCLOAK_USER and KEYCLOAK_PASSWORD , and expose port 8080. Where HTTPS is specified throughout, use HTTP instead. You may also have to specify the exposed port, 8080.","title":"Prerequisites"},{"location":"guides/auth/keycloak/#steps","text":"Sign in to the administration portal for your Keycloak instance at https://keycloak.example.com/auth/admin/master/console You may note that a separate realm is specified throughout this tutorial. It is best practice not to use the master realm, as it normally contains the realm-management client that federates access using the policies and permissions you can create. Navigate to the client management page at https://keycloak.example.com/auth/admin/master/console/#/realms/your-realm/clients (admin permissions required) Click Create to create a new client and fill out the registration form. You should set the Root URL to the fully qualified public URL of your HedgeDoc instance. Click Save Set the Access Type of the client to confidential . This will make your client require a client secret upon authentication.","title":"Steps"},{"location":"guides/auth/keycloak/#additional-steps-to-circumvent-generic-oauth2-issue","text":"Select Client Scopes from the sidebar, and begin to create a new client scope using the Create button. Ensure that the Name field is set to id . Create a new mapper under the Mappers tab. This should reference the User Property id . Claim JSON Type should be String and all switches below should be enabled. Save the mapper. Go to the client you set up in the previous steps using the Clients page, then choose the Client Scopes tab. Apply the scope you've created. This should mitigate errors as seen in hedgedoc/hedgedoc#56 , as the /userinfo endpoint should now bring back the user's ID under the id key as well as sub . In the docker-compose.yml add the following environment variables to app: environment: CMD_OAUTH2_USER_PROFILE_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/userinfo CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=preferred_username CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=name CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email CMD_OAUTH2_TOKEN_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/token CMD_OAUTH2_AUTHORIZATION_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/auth CMD_OAUTH2_CLIENT_ID=<your client ID> CMD_OAUTH2_CLIENT_SECRET=<your client secret, which you can find under the Credentials tab for your client> CMD_OAUTH2_PROVIDERNAME=Keycloak CMD_DOMAIN=<hedgedoc.example.com> CMD_PROTOCOL_USESSL=true CMD_URL_ADDPORT=false Run docker-compose up -d to apply your settings. Sign in to your HedgeDoc using your Keycloak ID","title":"Additional steps to circumvent generic OAuth2 issue"},{"location":"guides/auth/ldap-ad/","text":"AD LDAP auth \u00b6 To setup your HedgeDoc instance with Active Directory you need the following configs: CMD_LDAP_URL=ldap://internal.example.com CMD_LDAP_BINDDN=cn=binduser,cn=Users,dc=internal,dc=example,dc=com CMD_LDAP_BINDCREDENTIALS=<super secret password> CMD_LDAP_SEARCHBASE=dc=internal,dc=example,dc=com CMD_LDAP_SEARCHFILTER=(&(objectcategory=person)(objectclass=user)(|(sAMAccountName={{username}})(mail={{username}}))) CMD_LDAP_USERIDFIELD=sAMAccountName CMD_LDAP_PROVIDERNAME=Example Inc AD CMD_LDAP_BINDDN is either the distinguishedName or the userPrincipalName . This can cause \"username/password is invalid\" when either this value or the password from CMD_LDAP_BINDCREDENTIALS are incorrect. CMD_LDAP_SEARCHFILTER matches on all users and uses either the email address or the sAMAccountName (usually the login name you also use to login to Windows). Only using sAMAccountName looks like this: (&(objectcategory=person)(objectclass=user)(sAMAccountName={{username}})) CMD_LDAP_USERIDFIELD says we want to use sAMAccountName as unique identifier for the account itself. CMD_LDAP_PROVIDERNAME just the name written above the username and password field on the login page. Same in json: \"ldap\": { \"url\": \"ldap://internal.example.com\", \"bindDn\": \"cn=binduser,cn=Users,dc=internal,dc=example,dc=com\", \"bindCredentials\": \"<super secret password>\", \"searchBase\": \"dc=internal,dc=example,dc=com\", \"searchFilter\": \"(&(objectcategory=person)(objectclass=user)(|(sAMAccountName={{username}})(mail={{username}})))\", \"useridField\": \"sAMAccountName\", }, More details and example: https://www.npmjs.com/package/passport-ldapauth","title":"LDAP"},{"location":"guides/auth/ldap-ad/#ad-ldap-auth","text":"To setup your HedgeDoc instance with Active Directory you need the following configs: CMD_LDAP_URL=ldap://internal.example.com CMD_LDAP_BINDDN=cn=binduser,cn=Users,dc=internal,dc=example,dc=com CMD_LDAP_BINDCREDENTIALS=<super secret password> CMD_LDAP_SEARCHBASE=dc=internal,dc=example,dc=com CMD_LDAP_SEARCHFILTER=(&(objectcategory=person)(objectclass=user)(|(sAMAccountName={{username}})(mail={{username}}))) CMD_LDAP_USERIDFIELD=sAMAccountName CMD_LDAP_PROVIDERNAME=Example Inc AD CMD_LDAP_BINDDN is either the distinguishedName or the userPrincipalName . This can cause \"username/password is invalid\" when either this value or the password from CMD_LDAP_BINDCREDENTIALS are incorrect. CMD_LDAP_SEARCHFILTER matches on all users and uses either the email address or the sAMAccountName (usually the login name you also use to login to Windows). Only using sAMAccountName looks like this: (&(objectcategory=person)(objectclass=user)(sAMAccountName={{username}})) CMD_LDAP_USERIDFIELD says we want to use sAMAccountName as unique identifier for the account itself. CMD_LDAP_PROVIDERNAME just the name written above the username and password field on the login page. Same in json: \"ldap\": { \"url\": \"ldap://internal.example.com\", \"bindDn\": \"cn=binduser,cn=Users,dc=internal,dc=example,dc=com\", \"bindCredentials\": \"<super secret password>\", \"searchBase\": \"dc=internal,dc=example,dc=com\", \"searchFilter\": \"(&(objectcategory=person)(objectclass=user)(|(sAMAccountName={{username}})(mail={{username}})))\", \"useridField\": \"sAMAccountName\", }, More details and example: https://www.npmjs.com/package/passport-ldapauth","title":"AD LDAP auth"},{"location":"guides/auth/mattermost-self-hosted/","text":"Authentication guide - Mattermost (self-hosted) \u00b6 Note: The Mattermost setup portion of this document is just a quick guide. See the official documentation for more details. This guide uses the generic OAuth2 module for compatibility with Mattermost version 5.0 and above. Sign-in with an administrator account to your Mattermost instance Make sure OAuth 2.0 Service Provider is enabled in the Main Menu (menu button next to your username in the top left corner) --> System Console --> Custom Integrations menu, which you can find at https://your.mattermost.domain/admin_console/integrations/custom Navigate to the OAuth integration settings through Main Menu --> Integrations --> OAuth 2.0 Applications, at https://your.mattermost.domain/yourteam/integrations/oauth2-apps Click on the Add OAuth 2.0 Application button to add a new OAuth application Fill out the form and click Save Note: The callback URL is \\<your-hedgedoc-url>/auth/oauth2/callback After saving the application, you'll receive the Client ID and Client Secret Add the Client ID and Client Secret to your config.json file or pass them as environment variables config.json : javascript { \"production\": { \"oauth2\": { \"baseURL\": \"https://your.mattermost.domain\", \"userProfileURL\": \"https://your.mattermost.domain/api/v4/users/me\", \"userProfileUsernameAttr\": \"id\", \"userProfileDisplayNameAttr\": \"username\", \"userProfileEmailAttr\": \"email\", \"tokenURL\": \"https://your.mattermost.domain/oauth/access_token\", \"authorizationURL\": \"https://your.mattermost.domain/oauth/authorize\", \"clientID\": \"ii4p1u3jz7dXXXXXXXXXXXXXXX\", \"clientSecret\": \"mqzzx6fydbXXXXXXXXXXXXXXXX\" } } } environment variables: sh CMD_OAUTH2_BASEURL=https://your.mattermost.domain CMD_OAUTH2_USER_PROFILE_URL=https://your.mattermost.domain/api/v4/users/me CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=id CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=username CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email CMD_OAUTH2_TOKEN_URL=https://your.mattermost.domain/oauth/access_token CMD_OAUTH2_AUTHORIZATION_URL=https://your.mattermost.domain/oauth/authorize CMD_OAUTH2_CLIENT_ID=ii4p1u3jz7dXXXXXXXXXXXXXXX CMD_OAUTH2_CLIENT_SECRET=mqzzx6fydbXXXXXXXXXXXXXXXX","title":"Authentication guide - Mattermost (self-hosted)"},{"location":"guides/auth/mattermost-self-hosted/#authentication-guide-mattermost-self-hosted","text":"Note: The Mattermost setup portion of this document is just a quick guide. See the official documentation for more details. This guide uses the generic OAuth2 module for compatibility with Mattermost version 5.0 and above. Sign-in with an administrator account to your Mattermost instance Make sure OAuth 2.0 Service Provider is enabled in the Main Menu (menu button next to your username in the top left corner) --> System Console --> Custom Integrations menu, which you can find at https://your.mattermost.domain/admin_console/integrations/custom Navigate to the OAuth integration settings through Main Menu --> Integrations --> OAuth 2.0 Applications, at https://your.mattermost.domain/yourteam/integrations/oauth2-apps Click on the Add OAuth 2.0 Application button to add a new OAuth application Fill out the form and click Save Note: The callback URL is \\<your-hedgedoc-url>/auth/oauth2/callback After saving the application, you'll receive the Client ID and Client Secret Add the Client ID and Client Secret to your config.json file or pass them as environment variables config.json : javascript { \"production\": { \"oauth2\": { \"baseURL\": \"https://your.mattermost.domain\", \"userProfileURL\": \"https://your.mattermost.domain/api/v4/users/me\", \"userProfileUsernameAttr\": \"id\", \"userProfileDisplayNameAttr\": \"username\", \"userProfileEmailAttr\": \"email\", \"tokenURL\": \"https://your.mattermost.domain/oauth/access_token\", \"authorizationURL\": \"https://your.mattermost.domain/oauth/authorize\", \"clientID\": \"ii4p1u3jz7dXXXXXXXXXXXXXXX\", \"clientSecret\": \"mqzzx6fydbXXXXXXXXXXXXXXXX\" } } } environment variables: sh CMD_OAUTH2_BASEURL=https://your.mattermost.domain CMD_OAUTH2_USER_PROFILE_URL=https://your.mattermost.domain/api/v4/users/me CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=id CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=username CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email CMD_OAUTH2_TOKEN_URL=https://your.mattermost.domain/oauth/access_token CMD_OAUTH2_AUTHORIZATION_URL=https://your.mattermost.domain/oauth/authorize CMD_OAUTH2_CLIENT_ID=ii4p1u3jz7dXXXXXXXXXXXXXXX CMD_OAUTH2_CLIENT_SECRET=mqzzx6fydbXXXXXXXXXXXXXXXX","title":"Authentication guide - Mattermost (self-hosted)"},{"location":"guides/auth/nextcloud/","text":"Authentication guide - Nextcloud (self-hosted) \u00b6 This has been constructed using the Nextcloud OAuth2 Documentation combined with this issue comment on the nextcloud bugtracker . This guide uses the generic OAuth2 module for compatibility with Nextcloud 13 and above (this guide has been tested successfully with Nextcloud 14). Sign-in with an administrator account to your Nextcloud server Navigate to the OAuth integration settings: Profile Icon (top right) --> Settings Then choose Security Settings from the Administration part of the list - Don't confuse this with Personal Security Settings, where you would change your personal password! At the top there's OAuth 2.0-Clients. Add your HedgeDoc instance by giving it a name (perhaps HedgeDoc, but could be anything) and a Redirection-URI . The Redirection-URI will be \\<your-hedgedoc-url\\>/auth/oauth2/callback . Click Add . You'll now see a line containing a client identifier and a Secret . That's it for Nextcloud, the rest is configured in your HedgeDoc config.json or via the CMD_ environment variables! Add the Client ID and Client Secret to your config.json file or pass them as environment variables. Make sure you also replace <your-nextcloud-domain> with the right domain name. config.json : javascript { \"production\": { \"oauth2\": { \"clientID\": \"ii4p1u3jz7dXXXXXXXXXXXXXXX\", \"clientSecret\": \"mqzzx6fydbXXXXXXXXXXXXXXXX\", \"authorizationURL\": \"https://<your-nextcloud-domain>/apps/oauth2/authorize\", \"tokenURL\": \"https://<your-nextcloud-domain>/apps/oauth2/api/v1/token\", \"userProfileURL\": \"https://<your-nextcloud-domain>/ocs/v2.php/cloud/user?format=json\", \"userProfileUsernameAttr\": \"ocs.data.id\", \"userProfileDisplayNameAttr\": \"ocs.data.display-name\", \"userProfileEmailAttr\": \"ocs.data.email\" } } } environment variables: sh CMD_OAUTH2_CLIENT_ID=ii4p1u3jz7dXXXXXXXXXXXXXXX CMD_OAUTH2_CLIENT_SECRET=mqzzx6fydbXXXXXXXXXXXXXXXX CMD_OAUTH2_AUTHORIZATION_URL=https://<your-nextcloud-domain>/apps/oauth2/authorize CMD_OAUTH2_TOKEN_URL=https://<your-nextcloud-domain>/apps/oauth2/api/v1/token CMD_OAUTH2_USER_PROFILE_URL=https://<your-nextcloud-domain>/ocs/v2.php/cloud/user?format=json CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=ocs.data.id CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=ocs.data.display-name CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=ocs.data.email","title":"NextCloud"},{"location":"guides/auth/nextcloud/#authentication-guide-nextcloud-self-hosted","text":"This has been constructed using the Nextcloud OAuth2 Documentation combined with this issue comment on the nextcloud bugtracker . This guide uses the generic OAuth2 module for compatibility with Nextcloud 13 and above (this guide has been tested successfully with Nextcloud 14). Sign-in with an administrator account to your Nextcloud server Navigate to the OAuth integration settings: Profile Icon (top right) --> Settings Then choose Security Settings from the Administration part of the list - Don't confuse this with Personal Security Settings, where you would change your personal password! At the top there's OAuth 2.0-Clients. Add your HedgeDoc instance by giving it a name (perhaps HedgeDoc, but could be anything) and a Redirection-URI . The Redirection-URI will be \\<your-hedgedoc-url\\>/auth/oauth2/callback . Click Add . You'll now see a line containing a client identifier and a Secret . That's it for Nextcloud, the rest is configured in your HedgeDoc config.json or via the CMD_ environment variables! Add the Client ID and Client Secret to your config.json file or pass them as environment variables. Make sure you also replace <your-nextcloud-domain> with the right domain name. config.json : javascript { \"production\": { \"oauth2\": { \"clientID\": \"ii4p1u3jz7dXXXXXXXXXXXXXXX\", \"clientSecret\": \"mqzzx6fydbXXXXXXXXXXXXXXXX\", \"authorizationURL\": \"https://<your-nextcloud-domain>/apps/oauth2/authorize\", \"tokenURL\": \"https://<your-nextcloud-domain>/apps/oauth2/api/v1/token\", \"userProfileURL\": \"https://<your-nextcloud-domain>/ocs/v2.php/cloud/user?format=json\", \"userProfileUsernameAttr\": \"ocs.data.id\", \"userProfileDisplayNameAttr\": \"ocs.data.display-name\", \"userProfileEmailAttr\": \"ocs.data.email\" } } } environment variables: sh CMD_OAUTH2_CLIENT_ID=ii4p1u3jz7dXXXXXXXXXXXXXXX CMD_OAUTH2_CLIENT_SECRET=mqzzx6fydbXXXXXXXXXXXXXXXX CMD_OAUTH2_AUTHORIZATION_URL=https://<your-nextcloud-domain>/apps/oauth2/authorize CMD_OAUTH2_TOKEN_URL=https://<your-nextcloud-domain>/apps/oauth2/api/v1/token CMD_OAUTH2_USER_PROFILE_URL=https://<your-nextcloud-domain>/ocs/v2.php/cloud/user?format=json CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=ocs.data.id CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=ocs.data.display-name CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=ocs.data.email","title":"Authentication guide - Nextcloud (self-hosted)"},{"location":"guides/auth/oauth/","text":"OAuth general information \u00b6 service callback URL (after the server URL) facebook /auth/facebook/callback twitter /auth/twitter/callback github /auth/github/callback gitlab /auth/gitlab/callback mattermost /auth/mattermost/callback dropbox /auth/dropbox/callback google /auth/google/callback saml /auth/saml/callback","title":"OAuth"},{"location":"guides/auth/oauth/#oauth-general-information","text":"service callback URL (after the server URL) facebook /auth/facebook/callback twitter /auth/twitter/callback github /auth/github/callback gitlab /auth/gitlab/callback mattermost /auth/mattermost/callback dropbox /auth/dropbox/callback google /auth/google/callback saml /auth/saml/callback","title":"OAuth general information"},{"location":"guides/auth/saml-keycloak/","text":"How to setup HedgeDoc SAML with Keycloak \u00b6 Configuring Keycloak \u00b6 Get the public certificate \u00b6 Select the Realm you want to use for your HedgeDoc SAML Select \"Realm Settings\" in left sidebar Select the \"Keys\" tab Click the button \"Certificate\" at RS256 algorithm Copy this key and save it to the file specified in saml.idpCert property of the HedgeDoc configuration or CMD_SAML_IDPCERT environment variable Create a new client \u00b6 Select \"Client\" in left sidebar Click on the \"Create\" button Set a Client ID and specify this in saml.issuer property of the HedgeDoc configuration or CMD_SAML_ISSUER environment variable Select SAML as Client Protocol Set Client SAML Endpoint to https://hedgedoc.example.com/auth/saml (replace https://hedgedoc.example.com with the base URL of your HedgeDoc installation) Leave \"Client Signature Required\" enabled Set Root URL to https://hedgedoc.example.com (replace it here also with the base URL of your HedgeDoc installation) Set Valid Redirect URIs to https://hedgedoc.example.com/auth/saml/callback (you should also define all other domains of your HedgeDoc installtion with the suffix /auth/saml/callback ) Set Base URL to / (optional) You can set which Name ID Format should be used Configure HedgeDoc \u00b6 Config file \u00b6 You have to put the following block inside your config.json : \"saml\": { \"issuer\": \"hedgedoc\", // Change to the \"Client ID\" specified in the Keycloak Client \"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\", \"idpSsoUrl\": \"https://keycloak.example.org/auth/realms/test/protocol/saml\", // replace keycloak.example.org with the url of your keycloak server \"idpCert\": \"/path/to/the/cert.pem\", \"clientCert\": \"/path/to/the/key.pem\" // this one is optional, see below } Environment Variables \u00b6 CMD_SAML_IDPSSOURL : https://keycloak.example.org/auth/realms/test/protocol/saml (replace keycloak.example.org with the url of your keycloak server) CMD_SAML_IDPCERT : /path/to/the/cert.pem (optional, see below) CMD_SAML_CLIENTCERT : /path/to/the/key.pem CMD_SAML_ISSUER : hedgedoc (Change to the \"Client ID\" specified in the Keycloak Client) CMD_SAML_IDENTIFIERFORMAT : urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified Client certificate (optional) \u00b6 If you want keycloak to be able to verify HedgeDoc, you hava to create a client certificate. There are two options for this: Create Private Keys for Signing \u00b6 Generate the private key and certificate with the following commands: openssl genrsa -out priv.pem 2048 openssl req -new -x509 -key priv.pem -out cert.pem execute the following steps in keycloak Select \"Client\" in left sidebar Go to your HedgeDoc-Client Select the \"SAML Keys\" tab Click on \"Import\" Select Certificate PEM as \"Archive Format\" Now upload the generated cert.pem (in this case named cert.pem ) Click on \"Import\" Move or copy this key (in this case named key.pem ) and save it to the file specified in saml.clientCert property of the HedgeDoc configuration or in the enviroment-variable CMD_SAML_CLIENTCERT Convert Private Certificate generated by KeyCloak \u00b6 Instead if generating you own certificate, you can also use the one generated by keycloak. Select \"Client\" in left sidebar Go to your HedgeDoc-Client Select the \"SAML Keys\" tab Now click on \"Export\" Here you can select the output format, choose PKCS12 . You also have to set a password. Choose your own. Click on \"Download\" and save the file somewhere on you computer You now have to extract the private Key. You can do this with the following command. WHen asked, enter your password. openssl pkcs12 -in keystore.p12 -out key.pem -nocerts -nodes Move or copy this key (in this case named key.pem ) and save it to the file specified in saml.idpCert property of the HedgeDoc configuration or in the enviroment-variable CMD_SAML_CLIENTCERT Use Persistent Identifiers \u00b6 Instead of using the username as the owner-key in the HedgeDoc database, you can also use a persistent identifier. This allows to change the username, without them loosing access to their notes. Go to the HedgeDoc-Client in keycloak. Now enable the option \"Force Name ID Format\" and select \"persistent\" as the \"Name ID Format\". For HedgeDoc to be able to use the username and email configured in keycloak, you have to create the following SAML protocol mappers: 2.1. Create a mapper with the type User Property . Set the Name, Property and SAML Attribute Name to username . Now you can specify a friendly name (for example Username ) 2.2 Create a mapper with the type User Property . Set the Name, Property and SAML Attribute Name to email . Now you can specify a friendly name (for example E-Mail ) The configured mappers should look like this: You now have to add the following block to the saml-definition inside your config.json : \"attribute\": { \"username\": \"username\" \"email\": \"email\", } It you configure HedgeDoc with enviroment variables, these are the ones you have to set: CMD_SAML_ATTRIBUTE_USERNAME=username CMD_SAML_ATTRIBUTE_EMAIL=email","title":"SAML Keycloak"},{"location":"guides/auth/saml-keycloak/#how-to-setup-hedgedoc-saml-with-keycloak","text":"","title":"How to setup HedgeDoc SAML with Keycloak"},{"location":"guides/auth/saml-keycloak/#configuring-keycloak","text":"","title":"Configuring Keycloak"},{"location":"guides/auth/saml-keycloak/#get-the-public-certificate","text":"Select the Realm you want to use for your HedgeDoc SAML Select \"Realm Settings\" in left sidebar Select the \"Keys\" tab Click the button \"Certificate\" at RS256 algorithm Copy this key and save it to the file specified in saml.idpCert property of the HedgeDoc configuration or CMD_SAML_IDPCERT environment variable","title":"Get the public certificate"},{"location":"guides/auth/saml-keycloak/#create-a-new-client","text":"Select \"Client\" in left sidebar Click on the \"Create\" button Set a Client ID and specify this in saml.issuer property of the HedgeDoc configuration or CMD_SAML_ISSUER environment variable Select SAML as Client Protocol Set Client SAML Endpoint to https://hedgedoc.example.com/auth/saml (replace https://hedgedoc.example.com with the base URL of your HedgeDoc installation) Leave \"Client Signature Required\" enabled Set Root URL to https://hedgedoc.example.com (replace it here also with the base URL of your HedgeDoc installation) Set Valid Redirect URIs to https://hedgedoc.example.com/auth/saml/callback (you should also define all other domains of your HedgeDoc installtion with the suffix /auth/saml/callback ) Set Base URL to / (optional) You can set which Name ID Format should be used","title":"Create a new client"},{"location":"guides/auth/saml-keycloak/#configure-hedgedoc","text":"","title":"Configure HedgeDoc"},{"location":"guides/auth/saml-keycloak/#config-file","text":"You have to put the following block inside your config.json : \"saml\": { \"issuer\": \"hedgedoc\", // Change to the \"Client ID\" specified in the Keycloak Client \"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\", \"idpSsoUrl\": \"https://keycloak.example.org/auth/realms/test/protocol/saml\", // replace keycloak.example.org with the url of your keycloak server \"idpCert\": \"/path/to/the/cert.pem\", \"clientCert\": \"/path/to/the/key.pem\" // this one is optional, see below }","title":"Config file"},{"location":"guides/auth/saml-keycloak/#environment-variables","text":"CMD_SAML_IDPSSOURL : https://keycloak.example.org/auth/realms/test/protocol/saml (replace keycloak.example.org with the url of your keycloak server) CMD_SAML_IDPCERT : /path/to/the/cert.pem (optional, see below) CMD_SAML_CLIENTCERT : /path/to/the/key.pem CMD_SAML_ISSUER : hedgedoc (Change to the \"Client ID\" specified in the Keycloak Client) CMD_SAML_IDENTIFIERFORMAT : urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified","title":"Environment Variables"},{"location":"guides/auth/saml-keycloak/#client-certificate-optional","text":"If you want keycloak to be able to verify HedgeDoc, you hava to create a client certificate. There are two options for this:","title":"Client certificate (optional)"},{"location":"guides/auth/saml-keycloak/#create-private-keys-for-signing","text":"Generate the private key and certificate with the following commands: openssl genrsa -out priv.pem 2048 openssl req -new -x509 -key priv.pem -out cert.pem execute the following steps in keycloak Select \"Client\" in left sidebar Go to your HedgeDoc-Client Select the \"SAML Keys\" tab Click on \"Import\" Select Certificate PEM as \"Archive Format\" Now upload the generated cert.pem (in this case named cert.pem ) Click on \"Import\" Move or copy this key (in this case named key.pem ) and save it to the file specified in saml.clientCert property of the HedgeDoc configuration or in the enviroment-variable CMD_SAML_CLIENTCERT","title":"Create Private Keys for Signing"},{"location":"guides/auth/saml-keycloak/#convert-private-certificate-generated-by-keycloak","text":"Instead if generating you own certificate, you can also use the one generated by keycloak. Select \"Client\" in left sidebar Go to your HedgeDoc-Client Select the \"SAML Keys\" tab Now click on \"Export\" Here you can select the output format, choose PKCS12 . You also have to set a password. Choose your own. Click on \"Download\" and save the file somewhere on you computer You now have to extract the private Key. You can do this with the following command. WHen asked, enter your password. openssl pkcs12 -in keystore.p12 -out key.pem -nocerts -nodes Move or copy this key (in this case named key.pem ) and save it to the file specified in saml.idpCert property of the HedgeDoc configuration or in the enviroment-variable CMD_SAML_CLIENTCERT","title":"Convert Private Certificate generated by KeyCloak"},{"location":"guides/auth/saml-keycloak/#use-persistent-identifiers","text":"Instead of using the username as the owner-key in the HedgeDoc database, you can also use a persistent identifier. This allows to change the username, without them loosing access to their notes. Go to the HedgeDoc-Client in keycloak. Now enable the option \"Force Name ID Format\" and select \"persistent\" as the \"Name ID Format\". For HedgeDoc to be able to use the username and email configured in keycloak, you have to create the following SAML protocol mappers: 2.1. Create a mapper with the type User Property . Set the Name, Property and SAML Attribute Name to username . Now you can specify a friendly name (for example Username ) 2.2 Create a mapper with the type User Property . Set the Name, Property and SAML Attribute Name to email . Now you can specify a friendly name (for example E-Mail ) The configured mappers should look like this: You now have to add the following block to the saml-definition inside your config.json : \"attribute\": { \"username\": \"username\" \"email\": \"email\", } It you configure HedgeDoc with enviroment variables, these are the ones you have to set: CMD_SAML_ATTRIBUTE_USERNAME=username CMD_SAML_ATTRIBUTE_EMAIL=email","title":"Use Persistent Identifiers"},{"location":"guides/auth/saml-onelogin/","text":"Authentication guide - SAML (OneLogin) \u00b6 Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Sign-in or sign-up for an OneLogin account. (available free trial for 2 weeks) Go to the administration page. Select the APPS menu and click on the Add Apps . Find \"SAML Test Connector (SP)\" for template of settings and select it. Edit display name and icons for OneLogin dashboard as you want, and click SAVE . After that other tabs will appear, click the Configuration , and fill out the below items, and click SAVE . RelayState: The base URL of your HedgeDoc, which is issuer. (last slash is not needed) ACS (Consumer) URL Validator: The callback URL of your HedgeDoc. (serverurl + /auth/saml/callback) ACS (Consumer) URL: same as above. Login URL: login URL(SAML requester) of your CopiMD. (serverurl + /auth/saml) The registration is completed. Next, click SSO and copy or download the items below. X.509 Certificate: Click View Details and DOWNLOAD or copy the content of certificate ....(A) SAML 2.0 Endpoint (HTTP): Copy the URL ....(B) In your HedgeDoc server, create IdP certificate file from (A) Add the IdP URL (B) and the Idp certificate file path to your config.json file or pass them as environment variables. config.json : javascript { \"production\": { \"saml\": { \"idpSsoUrl\": \"https://*******.onelogin.com/trust/saml2/http-post/sso/******\", \"idpCert\": \"/path/to/idp_cert.pem\" } } } environment variables sh CMD_SAML_IDPSSOURL=https://*******.onelogin.com/trust/saml2/http-post/sso/****** CMD_SAML_IDPCERT=/path/to/idp_cert.pem Try sign-in with SAML from your HedgeDoc sign-in button or OneLogin dashboard (like the screenshot below).","title":"SAML Onelogin"},{"location":"guides/auth/saml-onelogin/#authentication-guide-saml-onelogin","text":"Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Sign-in or sign-up for an OneLogin account. (available free trial for 2 weeks) Go to the administration page. Select the APPS menu and click on the Add Apps . Find \"SAML Test Connector (SP)\" for template of settings and select it. Edit display name and icons for OneLogin dashboard as you want, and click SAVE . After that other tabs will appear, click the Configuration , and fill out the below items, and click SAVE . RelayState: The base URL of your HedgeDoc, which is issuer. (last slash is not needed) ACS (Consumer) URL Validator: The callback URL of your HedgeDoc. (serverurl + /auth/saml/callback) ACS (Consumer) URL: same as above. Login URL: login URL(SAML requester) of your CopiMD. (serverurl + /auth/saml) The registration is completed. Next, click SSO and copy or download the items below. X.509 Certificate: Click View Details and DOWNLOAD or copy the content of certificate ....(A) SAML 2.0 Endpoint (HTTP): Copy the URL ....(B) In your HedgeDoc server, create IdP certificate file from (A) Add the IdP URL (B) and the Idp certificate file path to your config.json file or pass them as environment variables. config.json : javascript { \"production\": { \"saml\": { \"idpSsoUrl\": \"https://*******.onelogin.com/trust/saml2/http-post/sso/******\", \"idpCert\": \"/path/to/idp_cert.pem\" } } } environment variables sh CMD_SAML_IDPSSOURL=https://*******.onelogin.com/trust/saml2/http-post/sso/****** CMD_SAML_IDPCERT=/path/to/idp_cert.pem Try sign-in with SAML from your HedgeDoc sign-in button or OneLogin dashboard (like the screenshot below).","title":"Authentication guide - SAML (OneLogin)"},{"location":"guides/auth/saml/","text":"Authentication guide - SAML \u00b6 Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! The basic procedure is the same as the case of OneLogin which is mentioned in OneLogin-Guide . If you want to match your IdP, you can use more configurations as below. If your IdP accepts metadata XML of the service provider to ease configuration, use this url to download metadata XML. {{your-serverurl}}/auth/saml/metadata Note: If not accessible from IdP, download to local once and upload to IdP. Change the value of issuer , identifierFormat to match your IdP. issuer : A unique id to identify the application to the IdP, which is the base URL of your HedgeDoc as default identifierFormat : A format of unique id to identify the user of IdP, which is the format based on email address as default. It is recommend that you use as below. urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress (default) urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified config.json : javascript { \"production\": { \"saml\": { /* omitted */ \"issuer\": \"myhedgedoc\" \"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\" } } } environment variables env CMD_SAML_ISSUER=myhedgedoc CMD_SAML_IDENTIFIERFORMAT=urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified Change mapping of attribute names to customize the displaying user name and email address to match your IdP. attribute : A dictionary to map attribute names attribute.id : A primary key of user table for your HedgeDoc attribute.username : Attribute name of displaying user name on HedgeDoc attribute.email : Attribute name of email address, which will be also used for Gravatar Note: Default value of all attributes is NameID of SAML response, which is email address if identifierFormat is default. config.json : javascript { \"production\": { \"saml\": { /* omitted */ \"attribute\": { \"id\": \"sAMAccountName\", \"username\": \"displayName\", \"email\": \"mail\" } } } } environment variables sh CMD_SAML_ATTRIBUTE_ID=sAMAccountName CMD_SAML_ATTRIBUTE_USERNAME=nickName CMD_SAML_ATTRIBUTE_EMAIL=mail If you want to control permission by group membership, add group attribute name and required group (allowed) or external group (not allowed). groupAttribute : An attribute name of group membership requiredGroups : Group names array for allowed access to HedgeDoc. Use vertical bar to separate for environment variables. externalGroups : Group names array for not allowed access to HedgeDoc. Use vertical bar to separate for environment variables. Note: Evaluates externalGroups first config.json : javascript { \"production\": { \"saml\": { /* omitted */ \"groupAttribute\": \"memberOf\", \"requiredGroups\": [ \"hedgedoc-users\", \"board-members\" ], \"externalGroups\": [ \"temporary-staff\" ] } } } environment variables sh CMD_SAML_GROUPATTRIBUTE=memberOf CMD_SAML_REQUIREDGROUPS=hedgedoc-users|board-members CMD_SAML_EXTERNALGROUPS=temporary-staff","title":"SAML"},{"location":"guides/auth/saml/#authentication-guide-saml","text":"Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! The basic procedure is the same as the case of OneLogin which is mentioned in OneLogin-Guide . If you want to match your IdP, you can use more configurations as below. If your IdP accepts metadata XML of the service provider to ease configuration, use this url to download metadata XML. {{your-serverurl}}/auth/saml/metadata Note: If not accessible from IdP, download to local once and upload to IdP. Change the value of issuer , identifierFormat to match your IdP. issuer : A unique id to identify the application to the IdP, which is the base URL of your HedgeDoc as default identifierFormat : A format of unique id to identify the user of IdP, which is the format based on email address as default. It is recommend that you use as below. urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress (default) urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified config.json : javascript { \"production\": { \"saml\": { /* omitted */ \"issuer\": \"myhedgedoc\" \"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\" } } } environment variables env CMD_SAML_ISSUER=myhedgedoc CMD_SAML_IDENTIFIERFORMAT=urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified Change mapping of attribute names to customize the displaying user name and email address to match your IdP. attribute : A dictionary to map attribute names attribute.id : A primary key of user table for your HedgeDoc attribute.username : Attribute name of displaying user name on HedgeDoc attribute.email : Attribute name of email address, which will be also used for Gravatar Note: Default value of all attributes is NameID of SAML response, which is email address if identifierFormat is default. config.json : javascript { \"production\": { \"saml\": { /* omitted */ \"attribute\": { \"id\": \"sAMAccountName\", \"username\": \"displayName\", \"email\": \"mail\" } } } } environment variables sh CMD_SAML_ATTRIBUTE_ID=sAMAccountName CMD_SAML_ATTRIBUTE_USERNAME=nickName CMD_SAML_ATTRIBUTE_EMAIL=mail If you want to control permission by group membership, add group attribute name and required group (allowed) or external group (not allowed). groupAttribute : An attribute name of group membership requiredGroups : Group names array for allowed access to HedgeDoc. Use vertical bar to separate for environment variables. externalGroups : Group names array for not allowed access to HedgeDoc. Use vertical bar to separate for environment variables. Note: Evaluates externalGroups first config.json : javascript { \"production\": { \"saml\": { /* omitted */ \"groupAttribute\": \"memberOf\", \"requiredGroups\": [ \"hedgedoc-users\", \"board-members\" ], \"externalGroups\": [ \"temporary-staff\" ] } } } environment variables sh CMD_SAML_GROUPATTRIBUTE=memberOf CMD_SAML_REQUIREDGROUPS=hedgedoc-users|board-members CMD_SAML_EXTERNALGROUPS=temporary-staff","title":"Authentication guide - SAML"},{"location":"guides/auth/twitter/","text":"Authentication guide - Twitter \u00b6 Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Sign-in or sign-up for a Twitter account Go to the Twitter Application management page here Click on the Create New App button to create a new Twitter app: Fill out the create application form, check the developer agreement box, and click Create Your Twitter Application Note: you may have to register your phone number with Twitter to create a Twitter application To do this Click your profile icon --> Settings and privacy --> Mobile --> Select Country/region --> Enter phone number --> Click Continue After you receive confirmation that the Twitter application was created, click Keys and Access Tokens Obtain your Twitter Consumer Key and Consumer Secret Add your Consumer Key and Consumer Secret to your config.json file or pass them as environment variables: config.json : javascript { \"production\": { \"twitter\": { \"consumerKey\": \"esTCJFXXXXXXXXXXXXXXXXXXX\", \"consumerSecret\": \"zpCs4tU86pRVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" } } } environment variables: sh CMD_TWITTER_CONSUMERKEY=esTCJFXXXXXXXXXXXXXXXXXXX CMD_TWITTER_CONSUMERSECRET=zpCs4tU86pRVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","title":"Twitter"},{"location":"guides/auth/twitter/#authentication-guide-twitter","text":"Note: This guide was written before the renaming. Just replace HackMD with HedgeDoc in your mind :smile: thanks! Sign-in or sign-up for a Twitter account Go to the Twitter Application management page here Click on the Create New App button to create a new Twitter app: Fill out the create application form, check the developer agreement box, and click Create Your Twitter Application Note: you may have to register your phone number with Twitter to create a Twitter application To do this Click your profile icon --> Settings and privacy --> Mobile --> Select Country/region --> Enter phone number --> Click Continue After you receive confirmation that the Twitter application was created, click Keys and Access Tokens Obtain your Twitter Consumer Key and Consumer Secret Add your Consumer Key and Consumer Secret to your config.json file or pass them as environment variables: config.json : javascript { \"production\": { \"twitter\": { \"consumerKey\": \"esTCJFXXXXXXXXXXXXXXXXXXX\", \"consumerSecret\": \"zpCs4tU86pRVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" } } } environment variables: sh CMD_TWITTER_CONSUMERKEY=esTCJFXXXXXXXXXXXXXXXXXXX CMD_TWITTER_CONSUMERSECRET=zpCs4tU86pRVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","title":"Authentication guide - Twitter"},{"location":"setup/cloudron/","text":"Cloudron \u00b6 HedgeDoc is available as a 1-click install on Cloudron . Cloudron makes it easy to run apps like HedgeDoc on your server and keep them up-to-date and secure. The source code for the package can be found here . There is a demo instance (username: cloudron password: cloudron) where you can experiment with running HedgeDoc.","title":"Cloudron"},{"location":"setup/cloudron/#cloudron","text":"HedgeDoc is available as a 1-click install on Cloudron . Cloudron makes it easy to run apps like HedgeDoc on your server and keep them up-to-date and secure. The source code for the package can be found here . There is a demo instance (username: cloudron password: cloudron) where you can experiment with running HedgeDoc.","title":"Cloudron"},{"location":"setup/docker-linuxserver/","text":"LinuxServer.io HedgeDoc Image \u00b6 LinuxServer.io have created an Ubuntu-based multi-arch container image for x86-64, arm64 and armhf. It supports all the environment variables detailed in the configuration documentation to modify it according to your needs. It gets rebuilt on new releases from HedgeDoc and also weekly if necessary to update any other package changes in the underlying container, making it easy to keep your HedgeDoc instance up to date. It also details how to easily utilize Docker networking to reverse proxy HedgeDoc using their SWAG docker image In order to contribute check the LinuxServer.io GitHub repository for HedgeDoc. And to find all tags and versions of the image, check the Docker Hub repository .","title":"LinuxServer"},{"location":"setup/docker-linuxserver/#linuxserverio-hedgedoc-image","text":"LinuxServer.io have created an Ubuntu-based multi-arch container image for x86-64, arm64 and armhf. It supports all the environment variables detailed in the configuration documentation to modify it according to your needs. It gets rebuilt on new releases from HedgeDoc and also weekly if necessary to update any other package changes in the underlying container, making it easy to keep your HedgeDoc instance up to date. It also details how to easily utilize Docker networking to reverse proxy HedgeDoc using their SWAG docker image In order to contribute check the LinuxServer.io GitHub repository for HedgeDoc. And to find all tags and versions of the image, check the Docker Hub repository .","title":"LinuxServer.io HedgeDoc Image"},{"location":"setup/docker/","text":"HedgeDoc Docker Image \u00b6 Debian-based version \u00b6 Alpine-based version \u00b6 The easiest way to setup HedgeDoc using docker are using the following three commands: git clone https://github.com/hedgedoc/container.git hedgedoc-container cd hedgedoc-container docker-compose up Read more about it in the container repository .","title":"Docker"},{"location":"setup/docker/#hedgedoc-docker-image","text":"","title":"HedgeDoc Docker Image"},{"location":"setup/docker/#debian-based-version","text":"","title":"Debian-based version"},{"location":"setup/docker/#alpine-based-version","text":"The easiest way to setup HedgeDoc using docker are using the following three commands: git clone https://github.com/hedgedoc/container.git hedgedoc-container cd hedgedoc-container docker-compose up Read more about it in the container repository .","title":"Alpine-based version"},{"location":"setup/heroku/","text":"Heroku Deployment \u00b6 You can quickly setup a sample Heroku HedgeDoc application by clicking the button below.","title":"Heroku"},{"location":"setup/heroku/#heroku-deployment","text":"You can quickly setup a sample Heroku HedgeDoc application by clicking the button below.","title":"Heroku Deployment"},{"location":"setup/kubernetes/","text":"Kubernetes \u00b6 HedgeDoc currently does not support any deployment via Kubernetes. If you want to help us creating a helm chart, then feel free to contact us on Matrix or Discourse .","title":"Kubernetes"},{"location":"setup/kubernetes/#kubernetes","text":"HedgeDoc currently does not support any deployment via Kubernetes. If you want to help us creating a helm chart, then feel free to contact us on Matrix or Discourse .","title":"Kubernetes"},{"location":"setup/manual-setup/","text":"Manual Installation \u00b6 Requirements on your server \u00b6 Node.js 10.13 or up Database (PostgreSQL, MySQL, MariaDB, SQLite, MSSQL) The database must use charset utf8 . This is typically the default in PostgreSQL and SQLite. In MySQL and MariaDB UTF-8 might need to be set with alter database <DBNAME> character set utf8 collate utf8_bin; Be aware of older MySQL and MariaDB versions which sometimes use shorter representations of UTF-8 than 4 bytes. This can break if symbols with more bytes are used. You can use alter database <DBNAME> character set utf8mb4 COLLATE utf8mb4_unicode_ci to be on the safe side. NPM (and its dependencies, node-gyp ) Yarn Bash (for the setup script) For building the HedgeDoc frontend you need a machine with at least 2 GB RAM. Starting with release 1.7 the release tarball includes the frontend, so building it yourself is not necessary. Instructions \u00b6 Check if you meet the requirements at the top of this document . Download a release tarball and extract it. Alternatively, you can use Git to clone the repository and checkout a release, e.g. with git clone -b 1.7.0 https://github.com/hedgedoc/hedgedoc.git . Enter the directory and type bin/setup , which will install the dependencies and create configs. Modify the file named config.json or configure HedgeDoc through environment variables which will overwrite the configs, see docs here . If using the release tarball for 1.7.0 or newer, this step can be skipped. Build the frontend bundle by yarn run build (use yarn run dev if you are in development) Modify the file named .sequelizerc , change the value of the variable url to your db connection string. For example: postgres://username:password@localhost:5432/hedgedoc mysql://username:password@localhost:3306/hedgedoc sqlite:///opt/hedgedoc/hedgedoc.sqlite (note that you need to use an absolute path to the SQLite file) It is recommended to start your server manually once: NODE_ENV=production yarn start , this way it's easier to see warnings or errors that might occur (leave out NODE_ENV=production for development). Run the server as you like (node, forever, pm2, SystemD, Init-Scripts) How to upgrade your installation \u00b6 If you are upgrading HedgeDoc from an older version, follow these steps: Check if you meet the requirements at the top of this document . Verify which version you were running before and take a look at migrations and breaking changes to see if additional steps, or configuration changes are necessary! Fully stop your old HedgeDoc server. git pull or unzip a new release in the directory. Run bin/setup . This will take care of installing dependencies. It is safe to run on an existing installation. Build front-end bundle by yarn run build (use yarn run dev if you are in development). It is recommended to start your server manually once: NODE_ENV=production yarn start , this way it's easier to see warnings or errors that might occur (leave out NODE_ENV=production for development). You can now restart the HedgeDoc server!","title":"Manual Installation"},{"location":"setup/manual-setup/#manual-installation","text":"","title":"Manual Installation"},{"location":"setup/manual-setup/#requirements-on-your-server","text":"Node.js 10.13 or up Database (PostgreSQL, MySQL, MariaDB, SQLite, MSSQL) The database must use charset utf8 . This is typically the default in PostgreSQL and SQLite. In MySQL and MariaDB UTF-8 might need to be set with alter database <DBNAME> character set utf8 collate utf8_bin; Be aware of older MySQL and MariaDB versions which sometimes use shorter representations of UTF-8 than 4 bytes. This can break if symbols with more bytes are used. You can use alter database <DBNAME> character set utf8mb4 COLLATE utf8mb4_unicode_ci to be on the safe side. NPM (and its dependencies, node-gyp ) Yarn Bash (for the setup script) For building the HedgeDoc frontend you need a machine with at least 2 GB RAM. Starting with release 1.7 the release tarball includes the frontend, so building it yourself is not necessary.","title":"Requirements on your server"},{"location":"setup/manual-setup/#instructions","text":"Check if you meet the requirements at the top of this document . Download a release tarball and extract it. Alternatively, you can use Git to clone the repository and checkout a release, e.g. with git clone -b 1.7.0 https://github.com/hedgedoc/hedgedoc.git . Enter the directory and type bin/setup , which will install the dependencies and create configs. Modify the file named config.json or configure HedgeDoc through environment variables which will overwrite the configs, see docs here . If using the release tarball for 1.7.0 or newer, this step can be skipped. Build the frontend bundle by yarn run build (use yarn run dev if you are in development) Modify the file named .sequelizerc , change the value of the variable url to your db connection string. For example: postgres://username:password@localhost:5432/hedgedoc mysql://username:password@localhost:3306/hedgedoc sqlite:///opt/hedgedoc/hedgedoc.sqlite (note that you need to use an absolute path to the SQLite file) It is recommended to start your server manually once: NODE_ENV=production yarn start , this way it's easier to see warnings or errors that might occur (leave out NODE_ENV=production for development). Run the server as you like (node, forever, pm2, SystemD, Init-Scripts)","title":"Instructions"},{"location":"setup/manual-setup/#how-to-upgrade-your-installation","text":"If you are upgrading HedgeDoc from an older version, follow these steps: Check if you meet the requirements at the top of this document . Verify which version you were running before and take a look at migrations and breaking changes to see if additional steps, or configuration changes are necessary! Fully stop your old HedgeDoc server. git pull or unzip a new release in the directory. Run bin/setup . This will take care of installing dependencies. It is safe to run on an existing installation. Build front-end bundle by yarn run build (use yarn run dev if you are in development). It is recommended to start your server manually once: NODE_ENV=production yarn start , this way it's easier to see warnings or errors that might occur (leave out NODE_ENV=production for development). You can now restart the HedgeDoc server!","title":"How to upgrade your installation"},{"location":"setup/reverse-proxy/","text":"Using a Reverse Proxy with HedgeDoc \u00b6 If you want to use a reverse proxy to serve HedgeDoc, here are the essential configs that you'll have to do. This documentation will cover HTTPS setup, with comments for HTTP setup. HedgeDoc config \u00b6 Full explanation of the configuration options config.json parameter Environment variable Value Example domain CMD_DOMAIN The full domain where your instance will be available hedgedoc.example.com host CMD_HOST An ip or domain name that is only available to HedgeDoc and your reverse proxy localhost port CMD_PORT An available port number on that IP 3000 path CMD_PATH path to UNIX domain socket to listen on (if specified, host or CMD_HOST and port or CMD_PORT are ignored) /var/run/hedgedoc.sock protocolUseSSL CMD_PROTOCOL_USESSL true if you want to serve your instance over SSL (HTTPS), false if you want to use plain HTTP true useSSL false , the communications between HedgeDoc and the proxy are unencrypted false urlAddPort CMD_URL_ADDPORT false , HedgeDoc should not append its port to the URLs it links false hsts.enable CMD_HSTS_ENABLE true if you host over SSL, false otherwise true Reverse Proxy config \u00b6 Generic \u00b6 The reverse proxy must allow websocket Upgrade requests at path /sockets.io/ . It must pass through the scheme used by the client (http or https). Nginx \u00b6 Here is an example configuration for Nginx. map $http_upgrade $connection_upgrade { default upgrade; '' close; } server { server_name hedgedoc.example.com; location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /socket.io/ { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } listen [::]:443 ssl http2; listen 443 ssl http2; ssl_certificate fullchain.pem; ssl_certificate_key privkey.pem; include options-ssl-nginx.conf; ssl_dhparam ssl-dhparams.pem; } Apache \u00b6 You will need these modules enabled: proxy , proxy_http and proxy_wstunnel . Here is an example config snippet: <VirtualHost *:443> ServerName hedgedoc.example.com RewriteEngine on RewriteCond %{REQUEST_URI} ^/socket.io [NC] RewriteCond %{HTTP:Upgrade} =websocket [NC] RewriteRule /(.*) ws://127.0.0.1:3000/$1 [P,L] ProxyPass / http://127.0.0.1:3000/ ProxyPassReverse / http://127.0.0.1:3000/ RequestHeader set \"X-Forwarded-Proto\" expr=%{REQUEST_SCHEME} ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined SSLCertificateFile /etc/letsencrypt/live/hedgedoc.example.com/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/hedgedoc.example.com/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf </VirtualHost>","title":"Reverse Proxy"},{"location":"setup/reverse-proxy/#using-a-reverse-proxy-with-hedgedoc","text":"If you want to use a reverse proxy to serve HedgeDoc, here are the essential configs that you'll have to do. This documentation will cover HTTPS setup, with comments for HTTP setup.","title":"Using a Reverse Proxy with HedgeDoc"},{"location":"setup/reverse-proxy/#hedgedoc-config","text":"Full explanation of the configuration options config.json parameter Environment variable Value Example domain CMD_DOMAIN The full domain where your instance will be available hedgedoc.example.com host CMD_HOST An ip or domain name that is only available to HedgeDoc and your reverse proxy localhost port CMD_PORT An available port number on that IP 3000 path CMD_PATH path to UNIX domain socket to listen on (if specified, host or CMD_HOST and port or CMD_PORT are ignored) /var/run/hedgedoc.sock protocolUseSSL CMD_PROTOCOL_USESSL true if you want to serve your instance over SSL (HTTPS), false if you want to use plain HTTP true useSSL false , the communications between HedgeDoc and the proxy are unencrypted false urlAddPort CMD_URL_ADDPORT false , HedgeDoc should not append its port to the URLs it links false hsts.enable CMD_HSTS_ENABLE true if you host over SSL, false otherwise true","title":"HedgeDoc config"},{"location":"setup/reverse-proxy/#reverse-proxy-config","text":"","title":"Reverse Proxy config"},{"location":"setup/reverse-proxy/#generic","text":"The reverse proxy must allow websocket Upgrade requests at path /sockets.io/ . It must pass through the scheme used by the client (http or https).","title":"Generic"},{"location":"setup/reverse-proxy/#nginx","text":"Here is an example configuration for Nginx. map $http_upgrade $connection_upgrade { default upgrade; '' close; } server { server_name hedgedoc.example.com; location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /socket.io/ { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } listen [::]:443 ssl http2; listen 443 ssl http2; ssl_certificate fullchain.pem; ssl_certificate_key privkey.pem; include options-ssl-nginx.conf; ssl_dhparam ssl-dhparams.pem; }","title":"Nginx"},{"location":"setup/reverse-proxy/#apache","text":"You will need these modules enabled: proxy , proxy_http and proxy_wstunnel . Here is an example config snippet: <VirtualHost *:443> ServerName hedgedoc.example.com RewriteEngine on RewriteCond %{REQUEST_URI} ^/socket.io [NC] RewriteCond %{HTTP:Upgrade} =websocket [NC] RewriteRule /(.*) ws://127.0.0.1:3000/$1 [P,L] ProxyPass / http://127.0.0.1:3000/ ProxyPassReverse / http://127.0.0.1:3000/ RequestHeader set \"X-Forwarded-Proto\" expr=%{REQUEST_SCHEME} ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined SSLCertificateFile /etc/letsencrypt/live/hedgedoc.example.com/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/hedgedoc.example.com/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf </VirtualHost>","title":"Apache"},{"location":"setup/yunohost/","text":"YunoHost \u00b6 HedgeDoc is available as a 1-click install on YunoHost . YunoHost is a Debian GNU/Linux based distribution packaged with free software that automates the installation of a personal web server. The source code for the package can be found here .","title":"Yunohost"},{"location":"setup/yunohost/#yunohost","text":"HedgeDoc is available as a 1-click install on YunoHost . YunoHost is a Debian GNU/Linux based distribution packaged with free software that automates the installation of a personal web server. The source code for the package can be found here .","title":"YunoHost"}]}